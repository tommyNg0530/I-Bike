
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f9c  08007f9c  000204ac  2**0
                  CONTENTS
  4 .ARM          00000000  08007f9c  08007f9c  000204ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f9c  08007f9c  000204ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f9c  08007f9c  00017f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fa0  08007fa0  00017fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004ac  20000000  08007fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  200004ac  08008450  000204ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08008450  00020778  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a01  00000000  00000000  000204d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025e3  00000000  00000000  00030ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00034630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019710  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cf5  00000000  00000000  0004edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea1a  00000000  00000000  00062aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101507  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005114  00000000  00000000  00101558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200004ac 	.word	0x200004ac
 8000204:	00000000 	.word	0x00000000
 8000208:	08007798 	.word	0x08007798

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200004b0 	.word	0x200004b0
 8000224:	08007798 	.word	0x08007798

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2iz>:
 80009d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d215      	bcs.n	8000a0a <__aeabi_d2iz+0x36>
 80009de:	d511      	bpl.n	8000a04 <__aeabi_d2iz+0x30>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d912      	bls.n	8000a10 <__aeabi_d2iz+0x3c>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fa:	fa23 f002 	lsr.w	r0, r3, r2
 80009fe:	bf18      	it	ne
 8000a00:	4240      	negne	r0, r0
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d105      	bne.n	8000a1c <__aeabi_d2iz+0x48>
 8000a10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a14:	bf08      	it	eq
 8000a16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	; 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d32:	2afd      	cmp	r2, #253	; 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	; 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	; 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	; 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_f2iz>:
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001074:	d30f      	bcc.n	8001096 <__aeabi_f2iz+0x2a>
 8001076:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d90d      	bls.n	800109c <__aeabi_f2iz+0x30>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001088:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	bf18      	it	ne
 8001092:	4240      	negne	r0, r0
 8001094:	4770      	bx	lr
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	4770      	bx	lr
 800109c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a0:	d101      	bne.n	80010a6 <__aeabi_f2iz+0x3a>
 80010a2:	0242      	lsls	r2, r0, #9
 80010a4:	d105      	bne.n	80010b2 <__aeabi_f2iz+0x46>
 80010a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010aa:	bf08      	it	eq
 80010ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010b0:	4770      	bx	lr
 80010b2:	f04f 0000 	mov.w	r0, #0
 80010b6:	4770      	bx	lr

080010b8 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	e002      	b.n	80010c8 <Delay+0x10>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <Delay+0xa>
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <LCD_INIT>:

void LCD_INIT ( void )
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 f829 	bl	8001138 <LCD_BackLed_Control>
	LCD_Rst();
 80010e6:	f000 f80f 	bl	8001108 <LCD_Rst>
	LCD_REG_Config();
 80010ea:	f000 f85f 	bl	80011ac <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f8:	22f0      	movs	r2, #240	; 0xf0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f000 f9e6 	bl	80014ce <LCD_Clear>
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2102      	movs	r1, #2
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <LCD_Rst+0x28>)
 8001112:	f002 fc98 	bl	8003a46 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <LCD_Rst+0x2c>)
 8001118:	f7ff ffce 	bl	80010b8 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2102      	movs	r1, #2
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <LCD_Rst+0x28>)
 8001122:	f002 fc90 	bl	8003a46 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <LCD_Rst+0x2c>)
 8001128:	f7ff ffc6 	bl	80010b8 <Delay>
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40011800 	.word	0x40011800
 8001134:	0002bffc 	.word	0x0002bffc

08001138 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <LCD_BackLed_Control+0x34>)
 8001150:	f002 fc79 	bl	8003a46 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001154:	e005      	b.n	8001162 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <LCD_BackLed_Control+0x34>)
 800115e:	f002 fc72 	bl	8003a46 <HAL_GPIO_WritePin>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40011400 	.word	0x40011400

08001170 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800117a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	8013      	strh	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <LCD_Write_Data+0x1c>)
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	8013      	strh	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	60020000 	.word	0x60020000

080011ac <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 80011b0:	20cf      	movs	r0, #207	; 0xcf
 80011b2:	f7ff ffdd 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ffe8 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 80011bc:	2081      	movs	r0, #129	; 0x81
 80011be:	f7ff ffe5 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 80011c2:	2030      	movs	r0, #48	; 0x30
 80011c4:	f7ff ffe2 	bl	800118c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 80011c8:	20ed      	movs	r0, #237	; 0xed
 80011ca:	f7ff ffd1 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 80011ce:	2064      	movs	r0, #100	; 0x64
 80011d0:	f7ff ffdc 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff ffd9 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 80011da:	2012      	movs	r0, #18
 80011dc:	f7ff ffd6 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80011e0:	2081      	movs	r0, #129	; 0x81
 80011e2:	f7ff ffd3 	bl	800118c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80011e6:	20e8      	movs	r0, #232	; 0xe8
 80011e8:	f7ff ffc2 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80011ec:	2085      	movs	r0, #133	; 0x85
 80011ee:	f7ff ffcd 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80011f2:	2010      	movs	r0, #16
 80011f4:	f7ff ffca 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f7ff ffc7 	bl	800118c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80011fe:	20cb      	movs	r0, #203	; 0xcb
 8001200:	f7ff ffb6 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001204:	2039      	movs	r0, #57	; 0x39
 8001206:	f7ff ffc1 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800120a:	202c      	movs	r0, #44	; 0x2c
 800120c:	f7ff ffbe 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff ffbb 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001216:	2034      	movs	r0, #52	; 0x34
 8001218:	f7ff ffb8 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff ffb5 	bl	800118c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8001222:	20f7      	movs	r0, #247	; 0xf7
 8001224:	f7ff ffa4 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8001228:	2020      	movs	r0, #32
 800122a:	f7ff ffaf 	bl	800118c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800122e:	20ea      	movs	r0, #234	; 0xea
 8001230:	f7ff ff9e 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff ffa9 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ffa6 	bl	800118c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001240:	20b1      	movs	r0, #177	; 0xb1
 8001242:	f7ff ff95 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ffa0 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 800124c:	201b      	movs	r0, #27
 800124e:	f7ff ff9d 	bl	800118c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001252:	20b6      	movs	r0, #182	; 0xb6
 8001254:	f7ff ff8c 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8001258:	200a      	movs	r0, #10
 800125a:	f7ff ff97 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 800125e:	20a2      	movs	r0, #162	; 0xa2
 8001260:	f7ff ff94 	bl	800118c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001264:	20c0      	movs	r0, #192	; 0xc0
 8001266:	f7ff ff83 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800126a:	2035      	movs	r0, #53	; 0x35
 800126c:	f7ff ff8e 	bl	800118c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001270:	20c1      	movs	r0, #193	; 0xc1
 8001272:	f7ff ff7d 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8001276:	2011      	movs	r0, #17
 8001278:	f7ff ff88 	bl	800118c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 800127c:	20c5      	movs	r0, #197	; 0xc5
 800127e:	f7ff ff77 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001282:	2045      	movs	r0, #69	; 0x45
 8001284:	f7ff ff82 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001288:	2045      	movs	r0, #69	; 0x45
 800128a:	f7ff ff7f 	bl	800118c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800128e:	20c7      	movs	r0, #199	; 0xc7
 8001290:	f7ff ff6e 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001294:	20a2      	movs	r0, #162	; 0xa2
 8001296:	f7ff ff79 	bl	800118c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800129a:	20f2      	movs	r0, #242	; 0xf2
 800129c:	f7ff ff68 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ff73 	bl	800118c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 80012a6:	2026      	movs	r0, #38	; 0x26
 80012a8:	f7ff ff62 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff ff6d 	bl	800118c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 80012b2:	20e0      	movs	r0, #224	; 0xe0
 80012b4:	f7ff ff5c 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 80012b8:	200f      	movs	r0, #15
 80012ba:	f7ff ff67 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 80012be:	2026      	movs	r0, #38	; 0x26
 80012c0:	f7ff ff64 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 80012c4:	2024      	movs	r0, #36	; 0x24
 80012c6:	f7ff ff61 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 80012ca:	200b      	movs	r0, #11
 80012cc:	f7ff ff5e 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 80012d0:	200e      	movs	r0, #14
 80012d2:	f7ff ff5b 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80012d6:	2009      	movs	r0, #9
 80012d8:	f7ff ff58 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80012dc:	2054      	movs	r0, #84	; 0x54
 80012de:	f7ff ff55 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80012e2:	20a8      	movs	r0, #168	; 0xa8
 80012e4:	f7ff ff52 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80012e8:	2046      	movs	r0, #70	; 0x46
 80012ea:	f7ff ff4f 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80012ee:	200c      	movs	r0, #12
 80012f0:	f7ff ff4c 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80012f4:	2017      	movs	r0, #23
 80012f6:	f7ff ff49 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80012fa:	2009      	movs	r0, #9
 80012fc:	f7ff ff46 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001300:	200f      	movs	r0, #15
 8001302:	f7ff ff43 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001306:	2007      	movs	r0, #7
 8001308:	f7ff ff40 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff3d 	bl	800118c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001312:	20e1      	movs	r0, #225	; 0xe1
 8001314:	f7ff ff2c 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff ff37 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800131e:	2019      	movs	r0, #25
 8001320:	f7ff ff34 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001324:	201b      	movs	r0, #27
 8001326:	f7ff ff31 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 800132a:	2004      	movs	r0, #4
 800132c:	f7ff ff2e 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001330:	2010      	movs	r0, #16
 8001332:	f7ff ff2b 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001336:	2007      	movs	r0, #7
 8001338:	f7ff ff28 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 800133c:	202a      	movs	r0, #42	; 0x2a
 800133e:	f7ff ff25 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001342:	2047      	movs	r0, #71	; 0x47
 8001344:	f7ff ff22 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8001348:	2039      	movs	r0, #57	; 0x39
 800134a:	f7ff ff1f 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800134e:	2003      	movs	r0, #3
 8001350:	f7ff ff1c 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001354:	2006      	movs	r0, #6
 8001356:	f7ff ff19 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800135a:	2006      	movs	r0, #6
 800135c:	f7ff ff16 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001360:	2030      	movs	r0, #48	; 0x30
 8001362:	f7ff ff13 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8001366:	2038      	movs	r0, #56	; 0x38
 8001368:	f7ff ff10 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800136c:	200f      	movs	r0, #15
 800136e:	f7ff ff0d 	bl	800118c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001372:	2036      	movs	r0, #54	; 0x36
 8001374:	f7ff fefc 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8001378:	20c8      	movs	r0, #200	; 0xc8
 800137a:	f7ff ff07 	bl	800118c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 800137e:	202a      	movs	r0, #42	; 0x2a
 8001380:	f7ff fef6 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff01 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fefe 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fefb 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001396:	20ef      	movs	r0, #239	; 0xef
 8001398:	f7ff fef8 	bl	800118c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800139c:	202b      	movs	r0, #43	; 0x2b
 800139e:	f7ff fee7 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fef2 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff feef 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 80013ae:	2001      	movs	r0, #1
 80013b0:	f7ff feec 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 80013b4:	203f      	movs	r0, #63	; 0x3f
 80013b6:	f7ff fee9 	bl	800118c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 80013ba:	203a      	movs	r0, #58	; 0x3a
 80013bc:	f7ff fed8 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 80013c0:	2055      	movs	r0, #85	; 0x55
 80013c2:	f7ff fee3 	bl	800118c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 80013c6:	2011      	movs	r0, #17
 80013c8:	f7ff fed2 	bl	8001170 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <LCD_REG_Config+0x230>)
 80013ce:	f7ff fe73 	bl	80010b8 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 80013d2:	2029      	movs	r0, #41	; 0x29
 80013d4:	f7ff fecc 	bl	8001170 <LCD_Write_Cmd>
	
	
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0002bffc 	.word	0x0002bffc

080013e0 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4604      	mov	r4, r0
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	80fb      	strh	r3, [r7, #6]
 80013f2:	4603      	mov	r3, r0
 80013f4:	80bb      	strh	r3, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	4613      	mov	r3, r2
 80013fc:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80013fe:	202a      	movs	r0, #42	; 0x2a
 8001400:	f7ff feb6 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	//Shift right 8 bit sequence = divide by 2^8 = 256 =
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff febe 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff feb8 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800141c:	88fa      	ldrh	r2, [r7, #6]
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	4413      	add	r3, r2
 8001422:	3b01      	subs	r3, #1
 8001424:	121b      	asrs	r3, r3, #8
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff feaf 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	4413      	add	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	3b01      	subs	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fea4 	bl	800118c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001444:	202b      	movs	r0, #43	; 0x2b
 8001446:	f7ff fe93 	bl	8001170 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	b29b      	uxth	r3, r3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe9b 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8001456:	88bb      	ldrh	r3, [r7, #4]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe95 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001462:	88ba      	ldrh	r2, [r7, #4]
 8001464:	883b      	ldrh	r3, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	3b01      	subs	r3, #1
 800146a:	121b      	asrs	r3, r3, #8
 800146c:	b29b      	uxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe8c 	bl	800118c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001474:	88ba      	ldrh	r2, [r7, #4]
 8001476:	883b      	ldrh	r3, [r7, #0]
 8001478:	4413      	add	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	b29b      	uxth	r3, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fe81 	bl	800118c <LCD_Write_Data>
	
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 80014a2:	202c      	movs	r0, #44	; 0x2c
 80014a4:	f7ff fe64 	bl	8001170 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e006      	b.n	80014bc <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe6b 	bl	800118c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3301      	adds	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3f4      	bcc.n	80014ae <LCD_FillColor+0x1c>
		
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	461a      	mov	r2, r3
 80014dc:	4623      	mov	r3, r4
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	4603      	mov	r3, r0
 80014e2:	80bb      	strh	r3, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80014ec:	883b      	ldrh	r3, [r7, #0]
 80014ee:	887a      	ldrh	r2, [r7, #2]
 80014f0:	88b9      	ldrh	r1, [r7, #4]
 80014f2:	88f8      	ldrh	r0, [r7, #6]
 80014f4:	f7ff ff74 	bl	80013e0 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	883a      	ldrh	r2, [r7, #0]
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	461a      	mov	r2, r3
 8001502:	8b3b      	ldrh	r3, [r7, #24]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff ffc3 	bl	8001492 <LCD_FillColor>
	
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}

08001514 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	80fb      	strh	r3, [r7, #6]
 800151e:	460b      	mov	r3, r1
 8001520:	80bb      	strh	r3, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	3b20      	subs	r3, #32
 800152a:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 800152c:	88b9      	ldrh	r1, [r7, #4]
 800152e:	88f8      	ldrh	r0, [r7, #6]
 8001530:	2310      	movs	r3, #16
 8001532:	2208      	movs	r2, #8
 8001534:	f7ff ff54 	bl	80013e0 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001538:	202c      	movs	r0, #44	; 0x2c
 800153a:	f7ff fe19 	bl	8001170 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800153e:	2300      	movs	r3, #0
 8001540:	73bb      	strb	r3, [r7, #14]
 8001542:	e023      	b.n	800158c <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001544:	7b3a      	ldrb	r2, [r7, #12]
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	4914      	ldr	r1, [pc, #80]	; (800159c <LCD_DrawChar+0x88>)
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	440a      	add	r2, r1
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]
 8001558:	e012      	b.n	8001580 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001564:	201f      	movs	r0, #31
 8001566:	f7ff fe11 	bl	800118c <LCD_Write_Data>
 800156a:	e003      	b.n	8001574 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 800156c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001570:	f7ff fe0c 	bl	800118c <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	085b      	lsrs	r3, r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	3301      	adds	r3, #1
 800157e:	737b      	strb	r3, [r7, #13]
 8001580:	7b7b      	ldrb	r3, [r7, #13]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d9e9      	bls.n	800155a <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001586:	7bbb      	ldrb	r3, [r7, #14]
 8001588:	3301      	adds	r3, #1
 800158a:	73bb      	strb	r3, [r7, #14]
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d9d8      	bls.n	8001544 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	08007960 	.word	0x08007960

080015a0 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	603a      	str	r2, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	460b      	mov	r3, r1
 80015ae:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 80015b0:	e01c      	b.n	80015ec <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2be8      	cmp	r3, #232	; 0xe8
 80015b6:	d904      	bls.n	80015c2 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80015b8:	2300      	movs	r3, #0
 80015ba:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 80015bc:	88bb      	ldrh	r3, [r7, #4]
 80015be:	3310      	adds	r3, #16
 80015c0:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 80015c8:	d903      	bls.n	80015d2 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 80015ca:	2300      	movs	r3, #0
 80015cc:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	88b9      	ldrh	r1, [r7, #4]
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff9a 	bl	8001514 <LCD_DrawChar>
		
		pStr ++;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	3308      	adds	r3, #8
 80015ea:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1de      	bne.n	80015b2 <LCD_DrawString+0x12>
		
	}
	
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_UART_RxCpltCallback>:
char message[50] = "Speed: 0 km/h     Distance: 0 m\r\n";
int msgCounter = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  // Check if the received data is '0' or '1'
  if(rxData == '1')
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_UART_RxCpltCallback+0x40>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b31      	cmp	r3, #49	; 0x31
 800160e:	d105      	bne.n	800161c <HAL_UART_RxCpltCallback+0x1c>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Turn B0 on
 8001610:	2200      	movs	r2, #0
 8001612:	2101      	movs	r1, #1
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_UART_RxCpltCallback+0x44>)
 8001616:	f002 fa16 	bl	8003a46 <HAL_GPIO_WritePin>
 800161a:	e008      	b.n	800162e <HAL_UART_RxCpltCallback+0x2e>
  }
  else if(rxData == '0')
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_UART_RxCpltCallback+0x40>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b30      	cmp	r3, #48	; 0x30
 8001622:	d104      	bne.n	800162e <HAL_UART_RxCpltCallback+0x2e>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Turn B0 off
 8001624:	2201      	movs	r2, #1
 8001626:	2101      	movs	r1, #1
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <HAL_UART_RxCpltCallback+0x44>)
 800162a:	f002 fa0c 	bl	8003a46 <HAL_GPIO_WritePin>
  }

  // Start the next receive operation
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	4903      	ldr	r1, [pc, #12]	; (8001640 <HAL_UART_RxCpltCallback+0x40>)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_UART_RxCpltCallback+0x48>)
 8001634:	f004 fece 	bl	80063d4 <HAL_UART_Receive_IT>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	2000000e 	.word	0x2000000e
 8001644:	40010c00 	.word	0x40010c00
 8001648:	200005ac 	.word	0x200005ac

0800164c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_7)
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	2b80      	cmp	r3, #128	; 0x80
 800165a:	d118      	bne.n	800168e <HAL_GPIO_EXTI_Callback+0x42>
  {
	// Get the current time and calculate the time between this interrupt and the last one
    uint32_t current_time = HAL_GetTick();
 800165c:	f001 fdca 	bl	80031f4 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]
    time_between_interrupts = current_time - last_interrupt_time;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_GPIO_EXTI_Callback+0x50>)
 800166c:	6013      	str	r3, [r2, #0]

    // Update the last_interrupt_time to the current time for the next interrupt
    last_interrupt_time = current_time;
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6013      	str	r3, [r2, #0]

    // Calculate the RPM based on the time between interrupts
    rpm = 60000 / time_between_interrupts; // RPM = 60,000 / time_between_interrupts
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_GPIO_EXTI_Callback+0x50>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f64e 2260 	movw	r2, #60000	; 0xea60
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8001682:	6013      	str	r3, [r2, #0]

    // Increment the rotation count
    rotation_count++;
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x58>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_GPIO_EXTI_Callback+0x58>)
 800168c:	6013      	str	r3, [r2, #0]
  }
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000698 	.word	0x20000698
 800169c:	2000069c 	.word	0x2000069c
 80016a0:	200006a0 	.word	0x200006a0
 80016a4:	200006a4 	.word	0x200006a4

080016a8 <check_bike_stopped>:

void check_bike_stopped()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
  static uint32_t last_rotation_count = 0;
  static uint32_t last_check_time = 0;

  uint32_t current_time = HAL_GetTick();
 80016ae:	f001 fda1 	bl	80031f4 <HAL_GetTick>
 80016b2:	6078      	str	r0, [r7, #4]

  if (current_time - last_check_time > 2000) // Check every 3 seconds
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <check_bike_stopped+0x58>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016c0:	d91a      	bls.n	80016f8 <check_bike_stopped+0x50>
  {
    if (rotation_count == last_rotation_count) // If rotation count has not changed, bike has stopped
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <check_bike_stopped+0x5c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <check_bike_stopped+0x60>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10d      	bne.n	80016ea <check_bike_stopped+0x42>
    {
      rpm = 0;
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <check_bike_stopped+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
      sprintf(message, "Speed: 0 km/h     Distance: %d m\r\n", (int)distance_traveled);
 80016d4:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <check_bike_stopped+0x68>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fcc7 	bl	800106c <__aeabi_f2iz>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	490c      	ldr	r1, [pc, #48]	; (8001714 <check_bike_stopped+0x6c>)
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <check_bike_stopped+0x70>)
 80016e6:	f005 fbe3 	bl	8006eb0 <siprintf>
    }

    last_rotation_count = rotation_count;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <check_bike_stopped+0x5c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <check_bike_stopped+0x60>)
 80016f0:	6013      	str	r3, [r2, #0]
    last_check_time = current_time;
 80016f2:	4a03      	ldr	r2, [pc, #12]	; (8001700 <check_bike_stopped+0x58>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6013      	str	r3, [r2, #0]
  }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200006b4 	.word	0x200006b4
 8001704:	200006a4 	.word	0x200006a4
 8001708:	200006b8 	.word	0x200006b8
 800170c:	200006a0 	.word	0x200006a0
 8001710:	200006a8 	.word	0x200006a8
 8001714:	080077b0 	.word	0x080077b0
 8001718:	20000010 	.word	0x20000010
 800171c:	00000000 	.word	0x00000000

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b0b3      	sub	sp, #204	; 0xcc
 8001724:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f001 fd0d 	bl	8003144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 fda1 	bl	8002270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 ff53 	bl	80025d8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001732:	f001 f815 	bl	8002760 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8001736:	f000 ff25 	bl	8002584 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800173a:	f000 fddd 	bl	80022f8 <MX_I2C2_Init>
  MX_TIM1_Init();
 800173e:	f000 fe09 	bl	8002354 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001742:	f000 fea7 	bl	8002494 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001746:	2100      	movs	r1, #0
 8001748:	48bf      	ldr	r0, [pc, #764]	; (8001a48 <main+0x328>)
 800174a:	f003 febb 	bl	80054c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800174e:	2100      	movs	r1, #0
 8001750:	48be      	ldr	r0, [pc, #760]	; (8001a4c <main+0x32c>)
 8001752:	f003 feb7 	bl	80054c4 <HAL_TIM_PWM_Start>
  LCD_INIT();
 8001756:	f7ff fcc0 	bl	80010da <LCD_INIT>
  max_init(8);  //Initialize max7219 led control module, 15 as brightness
 800175a:	2008      	movs	r0, #8
 800175c:	f001 fa8a 	bl	8002c74 <max_init>
  */

  //bmi160_soft_reset(&bmi160);
  //bmi160_init(&bmi160);

  HAL_UART_Receive_IT(&huart2,&rxData,1);
 8001760:	2201      	movs	r2, #1
 8001762:	49bb      	ldr	r1, [pc, #748]	; (8001a50 <main+0x330>)
 8001764:	48bb      	ldr	r0, [pc, #748]	; (8001a54 <main+0x334>)
 8001766:	f004 fe35 	bl	80063d4 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2101      	movs	r1, #1
 800176e:	48ba      	ldr	r0, [pc, #744]	; (8001a58 <main+0x338>)
 8001770:	f002 f969 	bl	8003a46 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */


	  //Display of gyroscope x y z
	  LCD_DrawString(20, 30, "Gyr_x:");
 8001774:	4ab9      	ldr	r2, [pc, #740]	; (8001a5c <main+0x33c>)
 8001776:	211e      	movs	r1, #30
 8001778:	2014      	movs	r0, #20
 800177a:	f7ff ff11 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 60, "Gyr_y:");
 800177e:	4ab8      	ldr	r2, [pc, #736]	; (8001a60 <main+0x340>)
 8001780:	213c      	movs	r1, #60	; 0x3c
 8001782:	2014      	movs	r0, #20
 8001784:	f7ff ff0c 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 90, "Gyr_z:");
 8001788:	4ab6      	ldr	r2, [pc, #728]	; (8001a64 <main+0x344>)
 800178a:	215a      	movs	r1, #90	; 0x5a
 800178c:	2014      	movs	r0, #20
 800178e:	f7ff ff07 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 120, "Acc_x:");
 8001792:	4ab5      	ldr	r2, [pc, #724]	; (8001a68 <main+0x348>)
 8001794:	2178      	movs	r1, #120	; 0x78
 8001796:	2014      	movs	r0, #20
 8001798:	f7ff ff02 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 150, "Acc_y:");
 800179c:	4ab3      	ldr	r2, [pc, #716]	; (8001a6c <main+0x34c>)
 800179e:	2196      	movs	r1, #150	; 0x96
 80017a0:	2014      	movs	r0, #20
 80017a2:	f7ff fefd 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 180, "Acc_z:");
 80017a6:	4ab2      	ldr	r2, [pc, #712]	; (8001a70 <main+0x350>)
 80017a8:	21b4      	movs	r1, #180	; 0xb4
 80017aa:	2014      	movs	r0, #20
 80017ac:	f7ff fef8 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 180, "Acc_z:");
 80017b0:	4aaf      	ldr	r2, [pc, #700]	; (8001a70 <main+0x350>)
 80017b2:	21b4      	movs	r1, #180	; 0xb4
 80017b4:	2014      	movs	r0, #20
 80017b6:	f7ff fef3 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 210, "Ride lv:");
 80017ba:	4aae      	ldr	r2, [pc, #696]	; (8001a74 <main+0x354>)
 80017bc:	21d2      	movs	r1, #210	; 0xd2
 80017be:	2014      	movs	r0, #20
 80017c0:	f7ff feee 	bl	80015a0 <LCD_DrawString>
	  //LCD_DrawString(20, 240, "Turn:");
	  LCD_DrawString(20, 240, "Motor:");
 80017c4:	4aac      	ldr	r2, [pc, #688]	; (8001a78 <main+0x358>)
 80017c6:	21f0      	movs	r1, #240	; 0xf0
 80017c8:	2014      	movs	r0, #20
 80017ca:	f7ff fee9 	bl	80015a0 <LCD_DrawString>



	  //gyroscope
	  HAL_I2C_Mem_Write(&hi2c2, 0x69<<1, 0x7e, 1, &Gyr, 1 ,100);      //activate gyroscope
 80017ce:	2364      	movs	r3, #100	; 0x64
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2301      	movs	r3, #1
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	4ba9      	ldr	r3, [pc, #676]	; (8001a7c <main+0x35c>)
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	227e      	movs	r2, #126	; 0x7e
 80017de:	21d2      	movs	r1, #210	; 0xd2
 80017e0:	48a7      	ldr	r0, [pc, #668]	; (8001a80 <main+0x360>)
 80017e2:	f002 faa5 	bl	8003d30 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 80017e6:	2064      	movs	r0, #100	; 0x64
 80017e8:	f001 fd0e 	bl	8003208 <HAL_Delay>

	  //For debug purpose (Check work mode of bmi160)
	  uint8_t work_mode = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X03, 1, &work_mode, 1 ,100);
 80017f2:	2364      	movs	r3, #100	; 0x64
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2301      	movs	r3, #1
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	f107 0393 	add.w	r3, r7, #147	; 0x93
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	2301      	movs	r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	21d2      	movs	r1, #210	; 0xd2
 8001806:	489e      	ldr	r0, [pc, #632]	; (8001a80 <main+0x360>)
 8001808:	f002 fb8c 	bl	8003f24 <HAL_I2C_Mem_Read>

	  uint8_t gyr_value_setting = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0x43, 1, &gyr_value_setting, 1 ,100); //Read  gyr_value_setting
 8001812:	2364      	movs	r3, #100	; 0x64
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f107 0392 	add.w	r3, r7, #146	; 0x92
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	2243      	movs	r2, #67	; 0x43
 8001824:	21d2      	movs	r1, #210	; 0xd2
 8001826:	4896      	ldr	r0, [pc, #600]	; (8001a80 <main+0x360>)
 8001828:	f002 fb7c 	bl	8003f24 <HAL_I2C_Mem_Read>

	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X0c, 1, &x_gyr_LSB, 1 ,100); //Read gyro x
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	2301      	movs	r3, #1
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	4b93      	ldr	r3, [pc, #588]	; (8001a84 <main+0x364>)
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2301      	movs	r3, #1
 800183a:	220c      	movs	r2, #12
 800183c:	21d2      	movs	r1, #210	; 0xd2
 800183e:	4890      	ldr	r0, [pc, #576]	; (8001a80 <main+0x360>)
 8001840:	f002 fb70 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X0d, 1, &x_gyr_MSB, 1 ,100);
 8001844:	2364      	movs	r3, #100	; 0x64
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	2301      	movs	r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	4b8e      	ldr	r3, [pc, #568]	; (8001a88 <main+0x368>)
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	220d      	movs	r2, #13
 8001854:	21d2      	movs	r1, #210	; 0xd2
 8001856:	488a      	ldr	r0, [pc, #552]	; (8001a80 <main+0x360>)
 8001858:	f002 fb64 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X0e, 1, &y_gyr_LSB, 1 ,100); //Read gyro y
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	2301      	movs	r3, #1
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	4b89      	ldr	r3, [pc, #548]	; (8001a8c <main+0x36c>)
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	220e      	movs	r2, #14
 800186c:	21d2      	movs	r1, #210	; 0xd2
 800186e:	4884      	ldr	r0, [pc, #528]	; (8001a80 <main+0x360>)
 8001870:	f002 fb58 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X0f, 1, &y_gyr_MSB, 1 ,100);
 8001874:	2364      	movs	r3, #100	; 0x64
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	2301      	movs	r3, #1
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <main+0x370>)
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2301      	movs	r3, #1
 8001882:	220f      	movs	r2, #15
 8001884:	21d2      	movs	r1, #210	; 0xd2
 8001886:	487e      	ldr	r0, [pc, #504]	; (8001a80 <main+0x360>)
 8001888:	f002 fb4c 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X10, 1, &z_gyr_LSB, 1 ,100); //Read gyro z
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2301      	movs	r3, #1
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <main+0x374>)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2301      	movs	r3, #1
 800189a:	2210      	movs	r2, #16
 800189c:	21d2      	movs	r1, #210	; 0xd2
 800189e:	4878      	ldr	r0, [pc, #480]	; (8001a80 <main+0x360>)
 80018a0:	f002 fb40 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X11, 1, &z_gyr_MSB, 1 ,100);
 80018a4:	2364      	movs	r3, #100	; 0x64
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2301      	movs	r3, #1
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <main+0x378>)
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2301      	movs	r3, #1
 80018b2:	2211      	movs	r2, #17
 80018b4:	21d2      	movs	r1, #210	; 0xd2
 80018b6:	4872      	ldr	r0, [pc, #456]	; (8001a80 <main+0x360>)
 80018b8:	f002 fb34 	bl	8003f24 <HAL_I2C_Mem_Read>


	  uint16_t whole_gyr_x = ((x_gyr_MSB | 0x0000) << 8) | (x_gyr_LSB & 0xffff);
 80018bc:	4b72      	ldr	r3, [pc, #456]	; (8001a88 <main+0x368>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b21a      	sxth	r2, r3
 80018c4:	4b6f      	ldr	r3, [pc, #444]	; (8001a84 <main+0x364>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	  uint16_t whole_gyr_y = ((y_gyr_MSB | 0x0000) << 8) | (y_gyr_LSB & 0xffff);
 80018d2:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <main+0x370>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	4b6c      	ldr	r3, [pc, #432]	; (8001a8c <main+0x36c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
	  uint16_t whole_gyr_z = ((z_gyr_MSB | 0x0000) << 8) | (z_gyr_LSB & 0xffff);
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <main+0x378>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21a      	sxth	r2, r3
 80018f0:	4b68      	ldr	r3, [pc, #416]	; (8001a94 <main+0x374>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2

	  gyr_x = (signed short)whole_gyr_x*3.14/180.0;
 80018fe:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdea 	bl	80004dc <__aeabi_i2d>
 8001908:	a34d      	add	r3, pc, #308	; (adr r3, 8001a40 <main+0x320>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe4f 	bl	80005b0 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b5f      	ldr	r3, [pc, #380]	; (8001a9c <main+0x37c>)
 8001920:	f7fe ff70 	bl	8000804 <__aeabi_ddiv>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f852 	bl	80009d4 <__aeabi_d2iz>
 8001930:	4603      	mov	r3, r0
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b5a      	ldr	r3, [pc, #360]	; (8001aa0 <main+0x380>)
 8001936:	801a      	strh	r2, [r3, #0]
      gyr_y = (signed short)whole_gyr_y*3.14/180.0;
 8001938:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fdcd 	bl	80004dc <__aeabi_i2d>
 8001942:	a33f      	add	r3, pc, #252	; (adr r3, 8001a40 <main+0x320>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe32 	bl	80005b0 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <main+0x37c>)
 800195a:	f7fe ff53 	bl	8000804 <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f835 	bl	80009d4 <__aeabi_d2iz>
 800196a:	4603      	mov	r3, r0
 800196c:	b21a      	sxth	r2, r3
 800196e:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <main+0x384>)
 8001970:	801a      	strh	r2, [r3, #0]
      gyr_z = (signed short)whole_gyr_z*3.14/180.0;
 8001972:	f9b7 30b2 	ldrsh.w	r3, [r7, #178]	; 0xb2
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdb0 	bl	80004dc <__aeabi_i2d>
 800197c:	a330      	add	r3, pc, #192	; (adr r3, 8001a40 <main+0x320>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fe15 	bl	80005b0 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <main+0x37c>)
 8001994:	f7fe ff36 	bl	8000804 <__aeabi_ddiv>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4610      	mov	r0, r2
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f818 	bl	80009d4 <__aeabi_d2iz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <main+0x388>)
 80019aa:	801a      	strh	r2, [r3, #0]

	  //Accelermeter
	  HAL_I2C_Mem_Write(&hi2c2, 0x69<<1, 0x7e, 1, &Acc, 1 ,100); //activate accelermeter
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <main+0x38c>)
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	227e      	movs	r2, #126	; 0x7e
 80019bc:	21d2      	movs	r1, #210	; 0xd2
 80019be:	4830      	ldr	r0, [pc, #192]	; (8001a80 <main+0x360>)
 80019c0:	f002 f9b6 	bl	8003d30 <HAL_I2C_Mem_Write>
	  HAL_Delay(100);
 80019c4:	2064      	movs	r0, #100	; 0x64
 80019c6:	f001 fc1f 	bl	8003208 <HAL_Delay>
	  /*
	   * HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X03, 1, &work_mode, 1 ,100);
	  uint8_t acc_value_setting = 0;
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0x43, 1, &acc_value_setting, 1 ,100); //Read  acc_value_setting
	  */
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X12, 1, &x_acc_LSB, 1 ,100); //Read acc x
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2301      	movs	r3, #1
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <main+0x390>)
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	2212      	movs	r2, #18
 80019da:	21d2      	movs	r1, #210	; 0xd2
 80019dc:	4828      	ldr	r0, [pc, #160]	; (8001a80 <main+0x360>)
 80019de:	f002 faa1 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X13, 1, &x_acc_MSB, 1 ,100);
 80019e2:	2364      	movs	r3, #100	; 0x64
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	2301      	movs	r3, #1
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <main+0x394>)
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	2213      	movs	r2, #19
 80019f2:	21d2      	movs	r1, #210	; 0xd2
 80019f4:	4822      	ldr	r0, [pc, #136]	; (8001a80 <main+0x360>)
 80019f6:	f002 fa95 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X14, 1, &y_acc_LSB, 1 ,100); //Read acc y
 80019fa:	2364      	movs	r3, #100	; 0x64
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <main+0x398>)
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2301      	movs	r3, #1
 8001a08:	2214      	movs	r2, #20
 8001a0a:	21d2      	movs	r1, #210	; 0xd2
 8001a0c:	481c      	ldr	r0, [pc, #112]	; (8001a80 <main+0x360>)
 8001a0e:	f002 fa89 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X15, 1, &y_acc_MSB, 1 ,100);
 8001a12:	2364      	movs	r3, #100	; 0x64
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <main+0x39c>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2215      	movs	r2, #21
 8001a22:	21d2      	movs	r1, #210	; 0xd2
 8001a24:	4816      	ldr	r0, [pc, #88]	; (8001a80 <main+0x360>)
 8001a26:	f002 fa7d 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X16, 1, &z_acc_LSB, 1 ,100); //Read acc z
 8001a2a:	2364      	movs	r3, #100	; 0x64
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <main+0x3a0>)
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2301      	movs	r3, #1
 8001a38:	2216      	movs	r2, #22
 8001a3a:	21d2      	movs	r1, #210	; 0xd2
 8001a3c:	e042      	b.n	8001ac4 <main+0x3a4>
 8001a3e:	bf00      	nop
 8001a40:	51eb851f 	.word	0x51eb851f
 8001a44:	40091eb8 	.word	0x40091eb8
 8001a48:	2000051c 	.word	0x2000051c
 8001a4c:	20000564 	.word	0x20000564
 8001a50:	2000000e 	.word	0x2000000e
 8001a54:	200005ac 	.word	0x200005ac
 8001a58:	40010c00 	.word	0x40010c00
 8001a5c:	080077d4 	.word	0x080077d4
 8001a60:	080077dc 	.word	0x080077dc
 8001a64:	080077e4 	.word	0x080077e4
 8001a68:	080077ec 	.word	0x080077ec
 8001a6c:	080077f4 	.word	0x080077f4
 8001a70:	080077fc 	.word	0x080077fc
 8001a74:	08007804 	.word	0x08007804
 8001a78:	08007810 	.word	0x08007810
 8001a7c:	20000001 	.word	0x20000001
 8001a80:	200004c8 	.word	0x200004c8
 8001a84:	2000063b 	.word	0x2000063b
 8001a88:	20000638 	.word	0x20000638
 8001a8c:	2000063c 	.word	0x2000063c
 8001a90:	20000639 	.word	0x20000639
 8001a94:	2000063d 	.word	0x2000063d
 8001a98:	2000063a 	.word	0x2000063a
 8001a9c:	40668000 	.word	0x40668000
 8001aa0:	20000644 	.word	0x20000644
 8001aa4:	20000646 	.word	0x20000646
 8001aa8:	20000648 	.word	0x20000648
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	20000641 	.word	0x20000641
 8001ab4:	2000063e 	.word	0x2000063e
 8001ab8:	20000642 	.word	0x20000642
 8001abc:	2000063f 	.word	0x2000063f
 8001ac0:	20000643 	.word	0x20000643
 8001ac4:	48c6      	ldr	r0, [pc, #792]	; (8001de0 <main+0x6c0>)
 8001ac6:	f002 fa2d 	bl	8003f24 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2, 0x69<<1, 0X17, 1, &z_acc_MSB, 1 ,100);
 8001aca:	2364      	movs	r3, #100	; 0x64
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	4bc4      	ldr	r3, [pc, #784]	; (8001de4 <main+0x6c4>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	2217      	movs	r2, #23
 8001ada:	21d2      	movs	r1, #210	; 0xd2
 8001adc:	48c0      	ldr	r0, [pc, #768]	; (8001de0 <main+0x6c0>)
 8001ade:	f002 fa21 	bl	8003f24 <HAL_I2C_Mem_Read>

	  uint16_t whole_acc_x = ((x_acc_MSB | 0x0000) << 8) | (x_acc_LSB & 0xffff);
 8001ae2:	4bc1      	ldr	r3, [pc, #772]	; (8001de8 <main+0x6c8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4bc0      	ldr	r3, [pc, #768]	; (8001dec <main+0x6cc>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  uint16_t whole_acc_y = ((y_acc_MSB | 0x0000) << 8) | (y_acc_LSB & 0xffff);
 8001af8:	4bbd      	ldr	r3, [pc, #756]	; (8001df0 <main+0x6d0>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	b21a      	sxth	r2, r3
 8001b00:	4bbc      	ldr	r3, [pc, #752]	; (8001df4 <main+0x6d4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  uint16_t whole_acc_z = ((z_acc_MSB | 0x0000) << 8) | (z_acc_LSB & 0xffff);
 8001b0e:	4bb5      	ldr	r3, [pc, #724]	; (8001de4 <main+0x6c4>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	4bb8      	ldr	r3, [pc, #736]	; (8001df8 <main+0x6d8>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac

	  //Accelermeter data precision (-10 to +10)
	  acc_x = (signed short)whole_acc_x/1638.40;
 8001b24:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcd7 	bl	80004dc <__aeabi_i2d>
 8001b2e:	a3aa      	add	r3, pc, #680	; (adr r3, 8001dd8 <main+0x6b8>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	f7fe fe66 	bl	8000804 <__aeabi_ddiv>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ff48 	bl	80009d4 <__aeabi_d2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4bac      	ldr	r3, [pc, #688]	; (8001dfc <main+0x6dc>)
 8001b4a:	801a      	strh	r2, [r3, #0]
	  acc_y = (signed short)whole_acc_y/1638.40;
 8001b4c:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fcc3 	bl	80004dc <__aeabi_i2d>
 8001b56:	a3a0      	add	r3, pc, #640	; (adr r3, 8001dd8 <main+0x6b8>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f7fe fe52 	bl	8000804 <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff34 	bl	80009d4 <__aeabi_d2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	4ba3      	ldr	r3, [pc, #652]	; (8001e00 <main+0x6e0>)
 8001b72:	801a      	strh	r2, [r3, #0]
	  acc_z = (signed short)whole_acc_z/1638.40;
 8001b74:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcaf 	bl	80004dc <__aeabi_i2d>
 8001b7e:	a396      	add	r3, pc, #600	; (adr r3, 8001dd8 <main+0x6b8>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fe3e 	bl	8000804 <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe ff20 	bl	80009d4 <__aeabi_d2iz>
 8001b94:	4603      	mov	r3, r0
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b9a      	ldr	r3, [pc, #616]	; (8001e04 <main+0x6e4>)
 8001b9a:	801a      	strh	r2, [r3, #0]


	  sprintf(gyr_x_display, "%d", gyr_x);	//Convert all
 8001b9c:	4b9a      	ldr	r3, [pc, #616]	; (8001e08 <main+0x6e8>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4999      	ldr	r1, [pc, #612]	; (8001e0c <main+0x6ec>)
 8001ba6:	489a      	ldr	r0, [pc, #616]	; (8001e10 <main+0x6f0>)
 8001ba8:	f005 f982 	bl	8006eb0 <siprintf>
	  sprintf(gyr_y_display, "%d", gyr_y);
 8001bac:	4b99      	ldr	r3, [pc, #612]	; (8001e14 <main+0x6f4>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4995      	ldr	r1, [pc, #596]	; (8001e0c <main+0x6ec>)
 8001bb6:	4898      	ldr	r0, [pc, #608]	; (8001e18 <main+0x6f8>)
 8001bb8:	f005 f97a 	bl	8006eb0 <siprintf>
	  sprintf(gyr_z_display, "%d", gyr_z);
 8001bbc:	4b97      	ldr	r3, [pc, #604]	; (8001e1c <main+0x6fc>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4991      	ldr	r1, [pc, #580]	; (8001e0c <main+0x6ec>)
 8001bc6:	4896      	ldr	r0, [pc, #600]	; (8001e20 <main+0x700>)
 8001bc8:	f005 f972 	bl	8006eb0 <siprintf>
	  sprintf(acc_x_display, "%d", acc_x);
 8001bcc:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <main+0x6dc>)
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	498d      	ldr	r1, [pc, #564]	; (8001e0c <main+0x6ec>)
 8001bd6:	4893      	ldr	r0, [pc, #588]	; (8001e24 <main+0x704>)
 8001bd8:	f005 f96a 	bl	8006eb0 <siprintf>
	  sprintf(acc_y_display, "%d", acc_y);
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <main+0x6e0>)
 8001bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be2:	461a      	mov	r2, r3
 8001be4:	4989      	ldr	r1, [pc, #548]	; (8001e0c <main+0x6ec>)
 8001be6:	4890      	ldr	r0, [pc, #576]	; (8001e28 <main+0x708>)
 8001be8:	f005 f962 	bl	8006eb0 <siprintf>
	  sprintf(acc_z_display, "%d", acc_z);
 8001bec:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <main+0x6e4>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4985      	ldr	r1, [pc, #532]	; (8001e0c <main+0x6ec>)
 8001bf6:	488d      	ldr	r0, [pc, #564]	; (8001e2c <main+0x70c>)
 8001bf8:	f005 f95a 	bl	8006eb0 <siprintf>
	  LCD_Clear(90,30, 50,  16, 0xffff);
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2310      	movs	r3, #16
 8001c04:	2232      	movs	r2, #50	; 0x32
 8001c06:	211e      	movs	r1, #30
 8001c08:	205a      	movs	r0, #90	; 0x5a
 8001c0a:	f7ff fc60 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,60, 50,  16, 0xffff);
 8001c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2310      	movs	r3, #16
 8001c16:	2232      	movs	r2, #50	; 0x32
 8001c18:	213c      	movs	r1, #60	; 0x3c
 8001c1a:	205a      	movs	r0, #90	; 0x5a
 8001c1c:	f7ff fc57 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,90, 50,  16, 0xffff);
 8001c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2310      	movs	r3, #16
 8001c28:	2232      	movs	r2, #50	; 0x32
 8001c2a:	215a      	movs	r1, #90	; 0x5a
 8001c2c:	205a      	movs	r0, #90	; 0x5a
 8001c2e:	f7ff fc4e 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,120, 50, 16, 0xffff);
 8001c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2310      	movs	r3, #16
 8001c3a:	2232      	movs	r2, #50	; 0x32
 8001c3c:	2178      	movs	r1, #120	; 0x78
 8001c3e:	205a      	movs	r0, #90	; 0x5a
 8001c40:	f7ff fc45 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,150, 50, 16, 0xffff);
 8001c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2310      	movs	r3, #16
 8001c4c:	2232      	movs	r2, #50	; 0x32
 8001c4e:	2196      	movs	r1, #150	; 0x96
 8001c50:	205a      	movs	r0, #90	; 0x5a
 8001c52:	f7ff fc3c 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,180, 50, 16, 0xffff);
 8001c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	2232      	movs	r2, #50	; 0x32
 8001c60:	21b4      	movs	r1, #180	; 0xb4
 8001c62:	205a      	movs	r0, #90	; 0x5a
 8001c64:	f7ff fc33 	bl	80014ce <LCD_Clear>
	  LCD_DrawString(90, 30,  gyr_x_display);
 8001c68:	4a69      	ldr	r2, [pc, #420]	; (8001e10 <main+0x6f0>)
 8001c6a:	211e      	movs	r1, #30
 8001c6c:	205a      	movs	r0, #90	; 0x5a
 8001c6e:	f7ff fc97 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 60,  gyr_y_display);
 8001c72:	4a69      	ldr	r2, [pc, #420]	; (8001e18 <main+0x6f8>)
 8001c74:	213c      	movs	r1, #60	; 0x3c
 8001c76:	205a      	movs	r0, #90	; 0x5a
 8001c78:	f7ff fc92 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 90,  gyr_z_display);
 8001c7c:	4a68      	ldr	r2, [pc, #416]	; (8001e20 <main+0x700>)
 8001c7e:	215a      	movs	r1, #90	; 0x5a
 8001c80:	205a      	movs	r0, #90	; 0x5a
 8001c82:	f7ff fc8d 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 120, acc_x_display);
 8001c86:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <main+0x704>)
 8001c88:	2178      	movs	r1, #120	; 0x78
 8001c8a:	205a      	movs	r0, #90	; 0x5a
 8001c8c:	f7ff fc88 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 150, acc_y_display);
 8001c90:	4a65      	ldr	r2, [pc, #404]	; (8001e28 <main+0x708>)
 8001c92:	2196      	movs	r1, #150	; 0x96
 8001c94:	205a      	movs	r0, #90	; 0x5a
 8001c96:	f7ff fc83 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 180, acc_z_display);
 8001c9a:	4a64      	ldr	r2, [pc, #400]	; (8001e2c <main+0x70c>)
 8001c9c:	21b4      	movs	r1, #180	; 0xb4
 8001c9e:	205a      	movs	r0, #90	; 0x5a
 8001ca0:	f7ff fc7e 	bl	80015a0 <LCD_DrawString>

	  //Determine turn left (-), right(+), none
	  char turn_direction[10];
	  int threshold_acc_z = 20; // Only trigger when greater than threshold value
 8001ca4:	2314      	movs	r3, #20
 8001ca6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  if (gyr_z > threshold_acc_z){
 8001caa:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <main+0x6fc>)
 8001cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	da10      	bge.n	8001cdc <main+0x5bc>
		  strcpy( turn_direction, "Right");
 8001cba:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cbe:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <main+0x710>)
 8001cc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cc4:	6018      	str	r0, [r3, #0]
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	8019      	strh	r1, [r3, #0]
		  //write_char(26,1);
		  scroll_char(26,500,'R');
 8001cca:	2252      	movs	r2, #82	; 0x52
 8001ccc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001cd0:	201a      	movs	r0, #26
 8001cd2:	f000 fec3 	bl	8002a5c <scroll_char>
		  max_clear();
 8001cd6:	f000 ff31 	bl	8002b3c <max_clear>
 8001cda:	e028      	b.n	8001d2e <main+0x60e>




	  }else if(gyr_z < -threshold_acc_z && gyr_z != 0){
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <main+0x6fc>)
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce8:	425b      	negs	r3, r3
 8001cea:	429a      	cmp	r2, r3
 8001cec:	da15      	bge.n	8001d1a <main+0x5fa>
 8001cee:	4b4b      	ldr	r3, [pc, #300]	; (8001e1c <main+0x6fc>)
 8001cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d010      	beq.n	8001d1a <main+0x5fa>
		  strcpy( turn_direction, "Left");
 8001cf8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <main+0x714>)
 8001cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d02:	6018      	str	r0, [r3, #0]
 8001d04:	3304      	adds	r3, #4
 8001d06:	7019      	strb	r1, [r3, #0]
		  //write_char(27,1);
		  scroll_char (27,500,'L');
 8001d08:	224c      	movs	r2, #76	; 0x4c
 8001d0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001d0e:	201b      	movs	r0, #27
 8001d10:	f000 fea4 	bl	8002a5c <scroll_char>
		  max_clear();
 8001d14:	f000 ff12 	bl	8002b3c <max_clear>
	  }else if(gyr_z < -threshold_acc_z && gyr_z != 0){
 8001d18:	e009      	b.n	8001d2e <main+0x60e>


	  }else{
		  strcpy( turn_direction, "None");
 8001d1a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001d1e:	4a46      	ldr	r2, [pc, #280]	; (8001e38 <main+0x718>)
 8001d20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d24:	6018      	str	r0, [r3, #0]
 8001d26:	3304      	adds	r3, #4
 8001d28:	7019      	strb	r1, [r3, #0]
		  max_clear();
 8001d2a:	f000 ff07 	bl	8002b3c <max_clear>
	  //Determine riding situation to switch derailleur [Based on acc's z-axis and x-axis]
	  //Installation of the bmi160 doesn't affect this part, just need to confirm x is pointing front of the bicycle

	  char incline_lv[10];
	  //  Non-Horizontal level
	  if (abs(acc_z) < 10 && acc_x != 0 ){
 8001d2e:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <main+0x6e4>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bfb8      	it	lt
 8001d38:	425b      	neglt	r3, r3
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	2b09      	cmp	r3, #9
 8001d3e:	f200 80fb 	bhi.w	8001f38 <main+0x818>
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <main+0x6dc>)
 8001d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80f5 	beq.w	8001f38 <main+0x818>

		  // +ve inclination level (down hill)
		  if (acc_x > 0){
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <main+0x6dc>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f340 8094 	ble.w	8001e82 <main+0x762>
			  switch(acc_x){
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <main+0x6dc>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	3b01      	subs	r3, #1
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	f200 80f2 	bhi.w	8001f4c <main+0x82c>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <main+0x650>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001d8d 	.word	0x08001d8d
 8001d74:	08001d9f 	.word	0x08001d9f
 8001d78:	08001db1 	.word	0x08001db1
 8001d7c:	08001dc3 	.word	0x08001dc3
 8001d80:	08001e4d 	.word	0x08001e4d
 8001d84:	08001e5f 	.word	0x08001e5f
 8001d88:	08001e71 	.word	0x08001e71
				  case 1:
					  strcpy( incline_lv, "DH 1");
 8001d8c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d90:	4a2a      	ldr	r2, [pc, #168]	; (8001e3c <main+0x71c>)
 8001d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d96:	6018      	str	r0, [r3, #0]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	7019      	strb	r1, [r3, #0]
					  break;
 8001d9c:	e0cb      	b.n	8001f36 <main+0x816>
				  case 2:
					  strcpy( incline_lv, "DH 2");
 8001d9e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001da2:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <main+0x720>)
 8001da4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001da8:	6018      	str	r0, [r3, #0]
 8001daa:	3304      	adds	r3, #4
 8001dac:	7019      	strb	r1, [r3, #0]
					  break;
 8001dae:	e0c2      	b.n	8001f36 <main+0x816>
				  case 3:
					  strcpy( incline_lv, "DH 3");
 8001db0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <main+0x724>)
 8001db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dba:	6018      	str	r0, [r3, #0]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	7019      	strb	r1, [r3, #0]
					  break;
 8001dc0:	e0b9      	b.n	8001f36 <main+0x816>
				  case 4:
					  strcpy( incline_lv, "DH 4");
 8001dc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <main+0x728>)
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	7019      	strb	r1, [r3, #0]
					  break;
 8001dd2:	e0b0      	b.n	8001f36 <main+0x816>
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	40999999 	.word	0x40999999
 8001de0:	200004c8 	.word	0x200004c8
 8001de4:	20000640 	.word	0x20000640
 8001de8:	2000063e 	.word	0x2000063e
 8001dec:	20000641 	.word	0x20000641
 8001df0:	2000063f 	.word	0x2000063f
 8001df4:	20000642 	.word	0x20000642
 8001df8:	20000643 	.word	0x20000643
 8001dfc:	2000064a 	.word	0x2000064a
 8001e00:	2000064c 	.word	0x2000064c
 8001e04:	2000064e 	.word	0x2000064e
 8001e08:	20000644 	.word	0x20000644
 8001e0c:	08007818 	.word	0x08007818
 8001e10:	20000650 	.word	0x20000650
 8001e14:	20000646 	.word	0x20000646
 8001e18:	20000658 	.word	0x20000658
 8001e1c:	20000648 	.word	0x20000648
 8001e20:	20000660 	.word	0x20000660
 8001e24:	20000668 	.word	0x20000668
 8001e28:	20000670 	.word	0x20000670
 8001e2c:	20000678 	.word	0x20000678
 8001e30:	0800781c 	.word	0x0800781c
 8001e34:	08007824 	.word	0x08007824
 8001e38:	0800782c 	.word	0x0800782c
 8001e3c:	08007834 	.word	0x08007834
 8001e40:	0800783c 	.word	0x0800783c
 8001e44:	08007844 	.word	0x08007844
 8001e48:	0800784c 	.word	0x0800784c
				  case 5:
					  strcpy( incline_lv, "DH 5");
 8001e4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e50:	4a75      	ldr	r2, [pc, #468]	; (8002028 <main+0x908>)
 8001e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e56:	6018      	str	r0, [r3, #0]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	7019      	strb	r1, [r3, #0]
					  break;
 8001e5c:	e06b      	b.n	8001f36 <main+0x816>
				  case 6:
					  strcpy( incline_lv, "DH 6");
 8001e5e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e62:	4a72      	ldr	r2, [pc, #456]	; (800202c <main+0x90c>)
 8001e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e68:	6018      	str	r0, [r3, #0]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	7019      	strb	r1, [r3, #0]
					  break;
 8001e6e:	e062      	b.n	8001f36 <main+0x816>
				  case 7:
					  strcpy( incline_lv, "DH 7");
 8001e70:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <main+0x910>)
 8001e76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e7a:	6018      	str	r0, [r3, #0]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	7019      	strb	r1, [r3, #0]
					  break;
 8001e80:	e059      	b.n	8001f36 <main+0x816>
			  }
		  }
		  // -ve inclination  (up hill)
		  else{
			  switch(abs(acc_x)){
 8001e82:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <main+0x914>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bfb8      	it	lt
 8001e8c:	425b      	neglt	r3, r3
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	3b01      	subs	r3, #1
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d85a      	bhi.n	8001f4c <main+0x82c>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <main+0x77c>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001eb9 	.word	0x08001eb9
 8001ea0:	08001ecb 	.word	0x08001ecb
 8001ea4:	08001edd 	.word	0x08001edd
 8001ea8:	08001eef 	.word	0x08001eef
 8001eac:	08001f01 	.word	0x08001f01
 8001eb0:	08001f13 	.word	0x08001f13
 8001eb4:	08001f25 	.word	0x08001f25
				  case 1:
					  strcpy( incline_lv, "UH 1");
 8001eb8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ebc:	4a5e      	ldr	r2, [pc, #376]	; (8002038 <main+0x918>)
 8001ebe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ec2:	6018      	str	r0, [r3, #0]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	7019      	strb	r1, [r3, #0]
					  break;
 8001ec8:	e035      	b.n	8001f36 <main+0x816>
				  case 2:
					  strcpy( incline_lv, "UH 2");
 8001eca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ece:	4a5b      	ldr	r2, [pc, #364]	; (800203c <main+0x91c>)
 8001ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ed4:	6018      	str	r0, [r3, #0]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	7019      	strb	r1, [r3, #0]
					  break;
 8001eda:	e02c      	b.n	8001f36 <main+0x816>
				  case 3:
					  strcpy( incline_lv, "UH 3");
 8001edc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ee0:	4a57      	ldr	r2, [pc, #348]	; (8002040 <main+0x920>)
 8001ee2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ee6:	6018      	str	r0, [r3, #0]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	7019      	strb	r1, [r3, #0]
					  break;
 8001eec:	e023      	b.n	8001f36 <main+0x816>
				  case 4:
					  strcpy( incline_lv, "UH 4");
 8001eee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ef2:	4a54      	ldr	r2, [pc, #336]	; (8002044 <main+0x924>)
 8001ef4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ef8:	6018      	str	r0, [r3, #0]
 8001efa:	3304      	adds	r3, #4
 8001efc:	7019      	strb	r1, [r3, #0]
					  break;
 8001efe:	e01a      	b.n	8001f36 <main+0x816>
				  case 5:
					  strcpy( incline_lv, "UH 5");
 8001f00:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f04:	4a50      	ldr	r2, [pc, #320]	; (8002048 <main+0x928>)
 8001f06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f0a:	6018      	str	r0, [r3, #0]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	7019      	strb	r1, [r3, #0]
					  break;
 8001f10:	e011      	b.n	8001f36 <main+0x816>
				  case 6:
					  strcpy( incline_lv, "UH 6");
 8001f12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f16:	4a4d      	ldr	r2, [pc, #308]	; (800204c <main+0x92c>)
 8001f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f1c:	6018      	str	r0, [r3, #0]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	7019      	strb	r1, [r3, #0]
					  break;
 8001f22:	e008      	b.n	8001f36 <main+0x816>
				  case 7:
					  strcpy( incline_lv, "UH 7");
 8001f24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f28:	4a49      	ldr	r2, [pc, #292]	; (8002050 <main+0x930>)
 8001f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f2e:	6018      	str	r0, [r3, #0]
 8001f30:	3304      	adds	r3, #4
 8001f32:	7019      	strb	r1, [r3, #0]
					  break;
 8001f34:	bf00      	nop
		  if (acc_x > 0){
 8001f36:	e009      	b.n	8001f4c <main+0x82c>
		  /*
		  if (){

		  }
		  */
		  strcpy( incline_lv, "Horizontal");
 8001f38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f3c:	4a45      	ldr	r2, [pc, #276]	; (8002054 <main+0x934>)
 8001f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f40:	c303      	stmia	r3!, {r0, r1}
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	3302      	adds	r3, #2
 8001f46:	0c12      	lsrs	r2, r2, #16
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	e000      	b.n	8001f4e <main+0x82e>
		  if (acc_x > 0){
 8001f4c:	bf00      	nop

	  }
	  LCD_Clear(90,210, 100, 16, 0xffff);
 8001f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2310      	movs	r3, #16
 8001f56:	2264      	movs	r2, #100	; 0x64
 8001f58:	21d2      	movs	r1, #210	; 0xd2
 8001f5a:	205a      	movs	r0, #90	; 0x5a
 8001f5c:	f7ff fab7 	bl	80014ce <LCD_Clear>
	  LCD_DrawString(90, 210, incline_lv);
 8001f60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f64:	461a      	mov	r2, r3
 8001f66:	21d2      	movs	r1, #210	; 0xd2
 8001f68:	205a      	movs	r0, #90	; 0x5a
 8001f6a:	f7ff fb19 	bl	80015a0 <LCD_DrawString>



	  //Motor control testing
	  GPIO_PinState PA_0;
	  PA_0 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001f6e:	2101      	movs	r1, #1
 8001f70:	4839      	ldr	r0, [pc, #228]	; (8002058 <main+0x938>)
 8001f72:	f001 fd51 	bl	8003a18 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  int pwm_value_list[] = {195,190,185,180,175,170,165,160,155,150,145,140,135,130,125,120,115,110,105,100,95,90,85,80,75,70};
 8001f7c:	4a37      	ldr	r2, [pc, #220]	; (800205c <main+0x93c>)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4611      	mov	r1, r2
 8001f82:	2268      	movs	r2, #104	; 0x68
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 ff7d 	bl	8006e84 <memcpy>
	  int num_level =  sizeof(pwm_value_list)/sizeof(pwm_value_list[0]);
 8001f8a:	231a      	movs	r3, #26
 8001f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  if (  PA_0 == GPIO_PIN_SET){
 8001f90:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d173      	bne.n	8002080 <main+0x960>

		  //check counter
		  if (motor_level_counter < num_level && motor_level_counter >= 0){
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <main+0x940>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dd33      	ble.n	800200c <main+0x8ec>
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <main+0x940>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db2f      	blt.n	800200c <main+0x8ec>

			  	char int_str[20];
			  	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm_value_list[motor_level_counter]);
 8001fac:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <main+0x940>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	33b8      	adds	r3, #184	; 0xb8
 8001fb4:	443b      	add	r3, r7
 8001fb6:	f853 2cb8 	ldr.w	r2, [r3, #-184]
 8001fba:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <main+0x944>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	635a      	str	r2, [r3, #52]	; 0x34
			  	sprintf(int_str, "%d", pwm_value_list[motor_level_counter]);
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <main+0x940>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	33b8      	adds	r3, #184	; 0xb8
 8001fc8:	443b      	add	r3, r7
 8001fca:	f853 2cb8 	ldr.w	r2, [r3, #-184]
 8001fce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fd2:	4925      	ldr	r1, [pc, #148]	; (8002068 <main+0x948>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 ff6b 	bl	8006eb0 <siprintf>
			  	strcpy(pwm_value, int_str);
 8001fda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4822      	ldr	r0, [pc, #136]	; (800206c <main+0x94c>)
 8001fe2:	f004 ff85 	bl	8006ef0 <strcpy>
			  	HAL_Delay(100);
 8001fe6:	2064      	movs	r0, #100	; 0x64
 8001fe8:	f001 f90e 	bl	8003208 <HAL_Delay>


			  //Update level counter [For level change]
			  if (derailuer_init_direction == 0){
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <main+0x950>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <main+0x8e0>
				motor_level_counter++;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <main+0x940>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <main+0x940>)
 8001ffc:	6013      	str	r3, [r2, #0]
		  if (motor_level_counter < num_level && motor_level_counter >= 0){
 8001ffe:	e03f      	b.n	8002080 <main+0x960>
			  }else{
				motor_level_counter--;
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <main+0x940>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	3b01      	subs	r3, #1
 8002006:	4a16      	ldr	r2, [pc, #88]	; (8002060 <main+0x940>)
 8002008:	6013      	str	r3, [r2, #0]
		  if (motor_level_counter < num_level && motor_level_counter >= 0){
 800200a:	e039      	b.n	8002080 <main+0x960>
			  }
		  }
		  //If reach maximum level reset the direction [Counter reset and reverse direction]
		  else{
			  if (derailuer_init_direction == 0){
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <main+0x950>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d12f      	bne.n	8002074 <main+0x954>
				  derailuer_init_direction = 1;
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <main+0x950>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]
				  motor_level_counter = num_level-2;  //set the motor level to max level - 1
 800201a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800201e:	3b02      	subs	r3, #2
 8002020:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <main+0x940>)
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e02c      	b.n	8002080 <main+0x960>
 8002026:	bf00      	nop
 8002028:	08007854 	.word	0x08007854
 800202c:	0800785c 	.word	0x0800785c
 8002030:	08007864 	.word	0x08007864
 8002034:	2000064a 	.word	0x2000064a
 8002038:	0800786c 	.word	0x0800786c
 800203c:	08007874 	.word	0x08007874
 8002040:	0800787c 	.word	0x0800787c
 8002044:	08007884 	.word	0x08007884
 8002048:	0800788c 	.word	0x0800788c
 800204c:	08007894 	.word	0x08007894
 8002050:	0800789c 	.word	0x0800789c
 8002054:	080078a4 	.word	0x080078a4
 8002058:	40010800 	.word	0x40010800
 800205c:	080078e8 	.word	0x080078e8
 8002060:	20000690 	.word	0x20000690
 8002064:	20000564 	.word	0x20000564
 8002068:	08007818 	.word	0x08007818
 800206c:	20000004 	.word	0x20000004
 8002070:	20000694 	.word	0x20000694
			  }else{
				  derailuer_init_direction = 0;
 8002074:	4b6c      	ldr	r3, [pc, #432]	; (8002228 <main+0xb08>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
				  motor_level_counter = 1;  //set the motor level to lowest level + 1
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <main+0xb0c>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
			  }
		  }
	  }
	  LCD_Clear(90,240, 100, 16, 0xffff);
 8002080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2310      	movs	r3, #16
 8002088:	2264      	movs	r2, #100	; 0x64
 800208a:	21f0      	movs	r1, #240	; 0xf0
 800208c:	205a      	movs	r0, #90	; 0x5a
 800208e:	f7ff fa1e 	bl	80014ce <LCD_Clear>
	  LCD_DrawString(90, 240, pwm_value);
 8002092:	4a67      	ldr	r2, [pc, #412]	; (8002230 <main+0xb10>)
 8002094:	21f0      	movs	r1, #240	; 0xf0
 8002096:	205a      	movs	r0, #90	; 0x5a
 8002098:	f7ff fa82 	bl	80015a0 <LCD_DrawString>

	  // speed and distance calculation
	  float wheel_circumference = 2 * 3.14159 * wheel_radius; // Replace 0.5 with the actual radius of your wheel
 800209c:	4b65      	ldr	r3, [pc, #404]	; (8002234 <main+0xb14>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa2e 	bl	8000500 <__aeabi_f2d>
 80020a4:	a35c      	add	r3, pc, #368	; (adr r3, 8002218 <main+0xaf8>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fa81 	bl	80005b0 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fcb5 	bl	8000a24 <__aeabi_d2f>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  float speed = rpm * wheel_circumference / 60;
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <main+0xb18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fdb3 	bl	8000c30 <__aeabi_ui2f>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fe05 	bl	8000ce0 <__aeabi_fmul>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4958      	ldr	r1, [pc, #352]	; (800223c <main+0xb1c>)
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe feb4 	bl	8000e48 <__aeabi_fdiv>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	  float speed_km_h = speed * 3.6;
 80020e6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80020ea:	f7fe fa09 	bl	8000500 <__aeabi_f2d>
 80020ee:	a34c      	add	r3, pc, #304	; (adr r3, 8002220 <main+0xb00>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe fa5c 	bl	80005b0 <__aeabi_dmul>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f7fe fc90 	bl	8000a24 <__aeabi_d2f>
 8002104:	4603      	mov	r3, r0
 8002106:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	  distance_traveled = wheel_circumference * rotation_count;
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <main+0xb20>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fd8e 	bl	8000c30 <__aeabi_ui2f>
 8002114:	4603      	mov	r3, r0
 8002116:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fde0 	bl	8000ce0 <__aeabi_fmul>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <main+0xb24>)
 8002126:	601a      	str	r2, [r3, #0]

//	  if (msgCounter>=5){
	  /* Update the message to send over UART if the distance or speed has changed */
	  if (distance_traveled > previous_distance && (int)speed_km_h!=0 ) {
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <main+0xb24>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a46      	ldr	r2, [pc, #280]	; (8002248 <main+0xb28>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	4611      	mov	r1, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ff90 	bl	8001058 <__aeabi_fcmpgt>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <main+0xa4c>
 800213e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002142:	f7fe ff93 	bl	800106c <__aeabi_f2iz>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00f      	beq.n	800216c <main+0xa4c>
		  sprintf(message, "Speed: %d km/h     Distance: %d m\r\n", (int)speed_km_h, (int)distance_traveled);
 800214c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002150:	f7fe ff8c 	bl	800106c <__aeabi_f2iz>
 8002154:	4604      	mov	r4, r0
 8002156:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <main+0xb24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ff86 	bl	800106c <__aeabi_f2iz>
 8002160:	4603      	mov	r3, r0
 8002162:	4622      	mov	r2, r4
 8002164:	4939      	ldr	r1, [pc, #228]	; (800224c <main+0xb2c>)
 8002166:	483a      	ldr	r0, [pc, #232]	; (8002250 <main+0xb30>)
 8002168:	f004 fea2 	bl	8006eb0 <siprintf>
	  }

	  HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 800216c:	4838      	ldr	r0, [pc, #224]	; (8002250 <main+0xb30>)
 800216e:	f7fe f85b 	bl	8000228 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	2364      	movs	r3, #100	; 0x64
 8002178:	4935      	ldr	r1, [pc, #212]	; (8002250 <main+0xb30>)
 800217a:	4836      	ldr	r0, [pc, #216]	; (8002254 <main+0xb34>)
 800217c:	f004 f898 	bl	80062b0 <HAL_UART_Transmit>
	  msgCounter=0;
 8002180:	4b35      	ldr	r3, [pc, #212]	; (8002258 <main+0xb38>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
//	  }
	  previous_distance = distance_traveled;
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <main+0xb24>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <main+0xb28>)
 800218c:	6013      	str	r3, [r2, #0]
	  LCD_DrawString(20, 270, "RPM: ");
 800218e:	4a33      	ldr	r2, [pc, #204]	; (800225c <main+0xb3c>)
 8002190:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002194:	2014      	movs	r0, #20
 8002196:	f7ff fa03 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(20, 290, "Distance: ");
 800219a:	4a31      	ldr	r2, [pc, #196]	; (8002260 <main+0xb40>)
 800219c:	f44f 7191 	mov.w	r1, #290	; 0x122
 80021a0:	2014      	movs	r0, #20
 80021a2:	f7ff f9fd 	bl	80015a0 <LCD_DrawString>
	  sprintf(speed_display, "%d", (int)rpm);
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <main+0xb18>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	492d      	ldr	r1, [pc, #180]	; (8002264 <main+0xb44>)
 80021ae:	482e      	ldr	r0, [pc, #184]	; (8002268 <main+0xb48>)
 80021b0:	f004 fe7e 	bl	8006eb0 <siprintf>
	  sprintf(distance_display, "%d", (int)distance_traveled);
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <main+0xb24>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ff57 	bl	800106c <__aeabi_f2iz>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4928      	ldr	r1, [pc, #160]	; (8002264 <main+0xb44>)
 80021c4:	4829      	ldr	r0, [pc, #164]	; (800226c <main+0xb4c>)
 80021c6:	f004 fe73 	bl	8006eb0 <siprintf>
	  LCD_Clear(90,270, 50, 16, 0xffff);
 80021ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2310      	movs	r3, #16
 80021d2:	2232      	movs	r2, #50	; 0x32
 80021d4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021d8:	205a      	movs	r0, #90	; 0x5a
 80021da:	f7ff f978 	bl	80014ce <LCD_Clear>
	  LCD_Clear(90,290, 50, 16, 0xffff);
 80021de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	2310      	movs	r3, #16
 80021e6:	2232      	movs	r2, #50	; 0x32
 80021e8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80021ec:	205a      	movs	r0, #90	; 0x5a
 80021ee:	f7ff f96e 	bl	80014ce <LCD_Clear>
	  LCD_DrawString(90, 270, speed_display);
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <main+0xb48>)
 80021f4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021f8:	205a      	movs	r0, #90	; 0x5a
 80021fa:	f7ff f9d1 	bl	80015a0 <LCD_DrawString>
	  LCD_DrawString(90, 290, distance_display);
 80021fe:	4a1b      	ldr	r2, [pc, #108]	; (800226c <main+0xb4c>)
 8002200:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002204:	205a      	movs	r0, #90	; 0x5a
 8002206:	f7ff f9cb 	bl	80015a0 <LCD_DrawString>

	  check_bike_stopped();
 800220a:	f7ff fa4d 	bl	80016a8 <check_bike_stopped>
  {
 800220e:	f7ff bab1 	b.w	8001774 <main+0x54>
 8002212:	bf00      	nop
 8002214:	f3af 8000 	nop.w
 8002218:	f01b866e 	.word	0xf01b866e
 800221c:	401921f9 	.word	0x401921f9
 8002220:	cccccccd 	.word	0xcccccccd
 8002224:	400ccccc 	.word	0x400ccccc
 8002228:	20000694 	.word	0x20000694
 800222c:	20000690 	.word	0x20000690
 8002230:	20000004 	.word	0x20000004
 8002234:	3e99999a 	.word	0x3e99999a
 8002238:	200006a0 	.word	0x200006a0
 800223c:	42700000 	.word	0x42700000
 8002240:	200006a4 	.word	0x200006a4
 8002244:	200006a8 	.word	0x200006a8
 8002248:	200006ac 	.word	0x200006ac
 800224c:	080078b0 	.word	0x080078b0
 8002250:	20000010 	.word	0x20000010
 8002254:	200005ac 	.word	0x200005ac
 8002258:	200006b0 	.word	0x200006b0
 800225c:	080078d4 	.word	0x080078d4
 8002260:	080078dc 	.word	0x080078dc
 8002264:	08007818 	.word	0x08007818
 8002268:	20000680 	.word	0x20000680
 800226c:	20000688 	.word	0x20000688

08002270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b090      	sub	sp, #64	; 0x40
 8002274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002276:	f107 0318 	add.w	r3, r7, #24
 800227a:	2228      	movs	r2, #40	; 0x28
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f004 fe0e 	bl	8006ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002292:	2301      	movs	r3, #1
 8002294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a0:	2301      	movs	r3, #1
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022a4:	2302      	movs	r3, #2
 80022a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fbf5 	bl	8004aa8 <HAL_RCC_OscConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80022c4:	f000 fab0 	bl	8002828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c8:	230f      	movs	r3, #15
 80022ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022cc:	2302      	movs	r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	2102      	movs	r1, #2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f002 fe63 	bl	8004fac <HAL_RCC_ClockConfig>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80022ec:	f000 fa9c 	bl	8002828 <Error_Handler>
  }
}
 80022f0:	bf00      	nop
 80022f2:	3740      	adds	r7, #64	; 0x40
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022fc:	4b12      	ldr	r3, [pc, #72]	; (8002348 <MX_I2C2_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <MX_I2C2_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <MX_I2C2_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_I2C2_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MX_I2C2_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <MX_I2C2_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MX_I2C2_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <MX_I2C2_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	; (8002348 <MX_I2C2_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <MX_I2C2_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <MX_I2C2_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	; (8002348 <MX_I2C2_Init+0x50>)
 8002336:	f001 fbb7 	bl	8003aa8 <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 fa72 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200004c8 	.word	0x200004c8
 800234c:	40005800 	.word	0x40005800
 8002350:	000186a0 	.word	0x000186a0

08002354 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b096      	sub	sp, #88	; 0x58
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2220      	movs	r2, #32
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f004 fd87 	bl	8006ea0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <MX_TIM1_Init+0x138>)
 8002394:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <MX_TIM1_Init+0x13c>)
 8002396:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <MX_TIM1_Init+0x138>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <MX_TIM1_Init+0x138>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 449;
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <MX_TIM1_Init+0x138>)
 80023a6:	f240 12c1 	movw	r2, #449	; 0x1c1
 80023aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <MX_TIM1_Init+0x138>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <MX_TIM1_Init+0x138>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <MX_TIM1_Init+0x138>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023be:	4833      	ldr	r0, [pc, #204]	; (800248c <MX_TIM1_Init+0x138>)
 80023c0:	f002 ffd9 	bl	8005376 <HAL_TIM_Base_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023ca:	f000 fa2d 	bl	8002828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023d8:	4619      	mov	r1, r3
 80023da:	482c      	ldr	r0, [pc, #176]	; (800248c <MX_TIM1_Init+0x138>)
 80023dc:	f003 f9ea 	bl	80057b4 <HAL_TIM_ConfigClockSource>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023e6:	f000 fa1f 	bl	8002828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023ea:	4828      	ldr	r0, [pc, #160]	; (800248c <MX_TIM1_Init+0x138>)
 80023ec:	f003 f812 	bl	8005414 <HAL_TIM_PWM_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023f6:	f000 fa17 	bl	8002828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fa:	2300      	movs	r3, #0
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002402:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002406:	4619      	mov	r1, r3
 8002408:	4820      	ldr	r0, [pc, #128]	; (800248c <MX_TIM1_Init+0x138>)
 800240a:	f003 fe47 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002414:	f000 fa08 	bl	8002828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002418:	2360      	movs	r3, #96	; 0x60
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 250;
 800241c:	23fa      	movs	r3, #250	; 0xfa
 800241e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002420:	2300      	movs	r3, #0
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002430:	2300      	movs	r3, #0
 8002432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002438:	2200      	movs	r2, #0
 800243a:	4619      	mov	r1, r3
 800243c:	4813      	ldr	r0, [pc, #76]	; (800248c <MX_TIM1_Init+0x138>)
 800243e:	f003 f8fb 	bl	8005638 <HAL_TIM_PWM_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002448:	f000 f9ee 	bl	8002828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002464:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800246a:	1d3b      	adds	r3, r7, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <MX_TIM1_Init+0x138>)
 8002470:	f003 fe80 	bl	8006174 <HAL_TIMEx_ConfigBreakDeadTime>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800247a:	f000 f9d5 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <MX_TIM1_Init+0x138>)
 8002480:	f000 fcbc 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8002484:	bf00      	nop
 8002486:	3758      	adds	r7, #88	; 0x58
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000051c 	.word	0x2000051c
 8002490:	40012c00 	.word	0x40012c00

08002494 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08e      	sub	sp, #56	; 0x38
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800249a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024aa:	f107 031c 	add.w	r3, r7, #28
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024b4:	463b      	mov	r3, r7
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	615a      	str	r2, [r3, #20]
 80024c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024c6:	4b2d      	ldr	r3, [pc, #180]	; (800257c <MX_TIM3_Init+0xe8>)
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <MX_TIM3_Init+0xec>)
 80024ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <MX_TIM3_Init+0xe8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	; (800257c <MX_TIM3_Init+0xe8>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <MX_TIM3_Init+0xe8>)
 80024da:	22c7      	movs	r2, #199	; 0xc7
 80024dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <MX_TIM3_Init+0xe8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <MX_TIM3_Init+0xe8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024ea:	4824      	ldr	r0, [pc, #144]	; (800257c <MX_TIM3_Init+0xe8>)
 80024ec:	f002 ff43 	bl	8005376 <HAL_TIM_Base_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024f6:	f000 f997 	bl	8002828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024fa:	4820      	ldr	r0, [pc, #128]	; (800257c <MX_TIM3_Init+0xe8>)
 80024fc:	f002 ff8a 	bl	8005414 <HAL_TIM_PWM_Init>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002506:	f000 f98f 	bl	8002828 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800250a:	2307      	movs	r3, #7
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800250e:	2300      	movs	r3, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	4818      	ldr	r0, [pc, #96]	; (800257c <MX_TIM3_Init+0xe8>)
 800251a:	f003 fa0f 	bl	800593c <HAL_TIM_SlaveConfigSynchro>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002524:	f000 f980 	bl	8002828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	4619      	mov	r1, r3
 8002536:	4811      	ldr	r0, [pc, #68]	; (800257c <MX_TIM3_Init+0xe8>)
 8002538:	f003 fdb0 	bl	800609c <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002542:	f000 f971 	bl	8002828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002546:	2360      	movs	r3, #96	; 0x60
 8002548:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	4619      	mov	r1, r3
 800255c:	4807      	ldr	r0, [pc, #28]	; (800257c <MX_TIM3_Init+0xe8>)
 800255e:	f003 f86b 	bl	8005638 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002568:	f000 f95e 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <MX_TIM3_Init+0xe8>)
 800256e:	f000 fc45 	bl	8002dfc <HAL_TIM_MspPostInit>

}
 8002572:	bf00      	nop
 8002574:	3738      	adds	r7, #56	; 0x38
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000564 	.word	0x20000564
 8002580:	40000400 	.word	0x40000400

08002584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <MX_USART2_UART_Init+0x50>)
 800258c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 8002590:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025bc:	f003 fe2b 	bl	8006216 <HAL_UART_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025c6:	f000 f92f 	bl	8002828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200005ac 	.word	0x200005ac
 80025d4:	40004400 	.word	0x40004400

080025d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 0318 	add.w	r3, r7, #24
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ec:	4b56      	ldr	r3, [pc, #344]	; (8002748 <MX_GPIO_Init+0x170>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a55      	ldr	r2, [pc, #340]	; (8002748 <MX_GPIO_Init+0x170>)
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <MX_GPIO_Init+0x170>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002604:	4b50      	ldr	r3, [pc, #320]	; (8002748 <MX_GPIO_Init+0x170>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <MX_GPIO_Init+0x170>)
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <MX_GPIO_Init+0x170>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261c:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <MX_GPIO_Init+0x170>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	4a49      	ldr	r2, [pc, #292]	; (8002748 <MX_GPIO_Init+0x170>)
 8002622:	f043 0308 	orr.w	r3, r3, #8
 8002626:	6193      	str	r3, [r2, #24]
 8002628:	4b47      	ldr	r3, [pc, #284]	; (8002748 <MX_GPIO_Init+0x170>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002634:	4b44      	ldr	r3, [pc, #272]	; (8002748 <MX_GPIO_Init+0x170>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4a43      	ldr	r2, [pc, #268]	; (8002748 <MX_GPIO_Init+0x170>)
 800263a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800263e:	6193      	str	r3, [r2, #24]
 8002640:	4b41      	ldr	r3, [pc, #260]	; (8002748 <MX_GPIO_Init+0x170>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800264c:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <MX_GPIO_Init+0x170>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <MX_GPIO_Init+0x170>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	6193      	str	r3, [r2, #24]
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <MX_GPIO_Init+0x170>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Max_din_Pin|Max_cs_Pin|Max_clk_Pin, GPIO_PIN_RESET);
 8002664:	2200      	movs	r2, #0
 8002666:	2170      	movs	r1, #112	; 0x70
 8002668:	4838      	ldr	r0, [pc, #224]	; (800274c <MX_GPIO_Init+0x174>)
 800266a:	f001 f9ec 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800266e:	2201      	movs	r2, #1
 8002670:	2101      	movs	r1, #1
 8002672:	4837      	ldr	r0, [pc, #220]	; (8002750 <MX_GPIO_Init+0x178>)
 8002674:	f001 f9e7 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800267e:	4835      	ldr	r0, [pc, #212]	; (8002754 <MX_GPIO_Init+0x17c>)
 8002680:	f001 f9e1 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002684:	2200      	movs	r2, #0
 8002686:	2102      	movs	r1, #2
 8002688:	4833      	ldr	r0, [pc, #204]	; (8002758 <MX_GPIO_Init+0x180>)
 800268a:	f001 f9dc 	bl	8003a46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	f107 0318 	add.w	r3, r7, #24
 800269e:	4619      	mov	r1, r3
 80026a0:	482a      	ldr	r0, [pc, #168]	; (800274c <MX_GPIO_Init+0x174>)
 80026a2:	f001 f825 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Max_din_Pin Max_cs_Pin Max_clk_Pin */
  GPIO_InitStruct.Pin = Max_din_Pin|Max_cs_Pin|Max_clk_Pin;
 80026a6:	2370      	movs	r3, #112	; 0x70
 80026a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2302      	movs	r3, #2
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	f107 0318 	add.w	r3, r7, #24
 80026ba:	4619      	mov	r1, r3
 80026bc:	4823      	ldr	r0, [pc, #140]	; (800274c <MX_GPIO_Init+0x174>)
 80026be:	f001 f817 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026c6:	4b25      	ldr	r3, [pc, #148]	; (800275c <MX_GPIO_Init+0x184>)
 80026c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	4619      	mov	r1, r3
 80026d4:	481d      	ldr	r0, [pc, #116]	; (800274c <MX_GPIO_Init+0x174>)
 80026d6:	f001 f80b 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e6:	2303      	movs	r3, #3
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0318 	add.w	r3, r7, #24
 80026ee:	4619      	mov	r1, r3
 80026f0:	4817      	ldr	r0, [pc, #92]	; (8002750 <MX_GPIO_Init+0x178>)
 80026f2:	f000 fffd 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002708:	f107 0318 	add.w	r3, r7, #24
 800270c:	4619      	mov	r1, r3
 800270e:	4811      	ldr	r0, [pc, #68]	; (8002754 <MX_GPIO_Init+0x17c>)
 8002710:	f000 ffee 	bl	80036f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002714:	2302      	movs	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2301      	movs	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	4619      	mov	r1, r3
 800272a:	480b      	ldr	r0, [pc, #44]	; (8002758 <MX_GPIO_Init+0x180>)
 800272c:	f000 ffe0 	bl	80036f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2017      	movs	r0, #23
 8002736:	f000 fe62 	bl	80033fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800273a:	2017      	movs	r0, #23
 800273c:	f000 fe7b 	bl	8003436 <HAL_NVIC_EnableIRQ>

}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	40010800 	.word	0x40010800
 8002750:	40010c00 	.word	0x40010c00
 8002754:	40011400 	.word	0x40011400
 8002758:	40011800 	.word	0x40011800
 800275c:	10210000 	.word	0x10210000

08002760 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	615a      	str	r2, [r3, #20]
 8002776:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002778:	4b28      	ldr	r3, [pc, #160]	; (800281c <MX_FSMC_Init+0xbc>)
 800277a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800277e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002780:	4b26      	ldr	r3, [pc, #152]	; (800281c <MX_FSMC_Init+0xbc>)
 8002782:	4a27      	ldr	r2, [pc, #156]	; (8002820 <MX_FSMC_Init+0xc0>)
 8002784:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <MX_FSMC_Init+0xbc>)
 8002788:	2200      	movs	r2, #0
 800278a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <MX_FSMC_Init+0xbc>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002792:	4b22      	ldr	r3, [pc, #136]	; (800281c <MX_FSMC_Init+0xbc>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <MX_FSMC_Init+0xbc>)
 800279a:	2210      	movs	r2, #16
 800279c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <MX_FSMC_Init+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_FSMC_Init+0xbc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <MX_FSMC_Init+0xbc>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <MX_FSMC_Init+0xbc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80027b6:	4b19      	ldr	r3, [pc, #100]	; (800281c <MX_FSMC_Init+0xbc>)
 80027b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <MX_FSMC_Init+0xbc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_FSMC_Init+0xbc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_FSMC_Init+0xbc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_FSMC_Init+0xbc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80027d6:	230f      	movs	r3, #15
 80027d8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80027da:	230f      	movs	r3, #15
 80027dc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80027de:	23ff      	movs	r3, #255	; 0xff
 80027e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80027e2:	230f      	movs	r3, #15
 80027e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80027e6:	2310      	movs	r3, #16
 80027e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80027ea:	2311      	movs	r3, #17
 80027ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	4619      	mov	r1, r3
 80027f8:	4808      	ldr	r0, [pc, #32]	; (800281c <MX_FSMC_Init+0xbc>)
 80027fa:	f002 fd6f 	bl	80052dc <HAL_SRAM_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002804:	f000 f810 	bl	8002828 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_FSMC_Init+0xc4>)
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	4a05      	ldr	r2, [pc, #20]	; (8002824 <MX_FSMC_Init+0xc4>)
 800280e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002812:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002814:	bf00      	nop
 8002816:	3720      	adds	r7, #32
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200005f0 	.word	0x200005f0
 8002820:	a0000104 	.word	0xa0000104
 8002824:	40010000 	.word	0x40010000

08002828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800282c:	b672      	cpsid	i
}
 800282e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002830:	e7fe      	b.n	8002830 <Error_Handler+0x8>
	...

08002834 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e018      	b.n	8002876 <write_byte+0x42>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8002844:	2200      	movs	r2, #0
 8002846:	2140      	movs	r1, #64	; 0x40
 8002848:	480f      	ldr	r0, [pc, #60]	; (8002888 <write_byte+0x54>)
 800284a:	f001 f8fc 	bl	8003a46 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	2110      	movs	r1, #16
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <write_byte+0x54>)
 800285c:	f001 f8f3 	bl	8003a46 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 8002866:	2201      	movs	r2, #1
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <write_byte+0x54>)
 800286c:	f001 f8eb 	bl	8003a46 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b07      	cmp	r3, #7
 800287a:	dde3      	ble.n	8002844 <write_byte+0x10>
	}
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40010800 	.word	0x40010800

0800288c <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	460a      	mov	r2, r1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	4613      	mov	r3, r2
 800289a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800289c:	2200      	movs	r2, #0
 800289e:	2120      	movs	r1, #32
 80028a0:	4810      	ldr	r0, [pc, #64]	; (80028e4 <write_max_cmd+0x58>)
 80028a2:	f001 f8d0 	bl	8003a46 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	e00a      	b.n	80028c2 <write_max_cmd+0x36>
	{
		write_byte (address);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff ffc0 	bl	8002834 <write_byte>
		write_byte (cmd); 
 80028b4:	79bb      	ldrb	r3, [r7, #6]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffbc 	bl	8002834 <write_byte>
	for (int i=0;i<num; i++)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	ddf1      	ble.n	80028ac <write_max_cmd+0x20>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 80028c8:	2200      	movs	r2, #0
 80028ca:	2120      	movs	r1, #32
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <write_max_cmd+0x58>)
 80028ce:	f001 f8ba 	bl	8003a46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80028d2:	2201      	movs	r2, #1
 80028d4:	2120      	movs	r1, #32
 80028d6:	4803      	ldr	r0, [pc, #12]	; (80028e4 <write_max_cmd+0x58>)
 80028d8:	f001 f8b5 	bl	8003a46 <HAL_GPIO_WritePin>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010800 	.word	0x40010800

080028e8 <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	460b      	mov	r3, r1
 80028f4:	71bb      	strb	r3, [r7, #6]
 80028f6:	4613      	mov	r3, r2
 80028f8:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80028fa:	797b      	ldrb	r3, [r7, #5]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00d      	beq.n	800291c <setled+0x34>
 8002900:	79bb      	ldrb	r3, [r7, #6]
 8002902:	4a2c      	ldr	r2, [pc, #176]	; (80029b4 <setled+0xcc>)
 8002904:	5cd1      	ldrb	r1, [r2, r3]
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2201      	movs	r2, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	b2da      	uxtb	r2, r3
 8002910:	79bb      	ldrb	r3, [r7, #6]
 8002912:	430a      	orrs	r2, r1
 8002914:	b2d1      	uxtb	r1, r2
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <setled+0xcc>)
 8002918:	54d1      	strb	r1, [r2, r3]
 800291a:	e00e      	b.n	800293a <setled+0x52>
 800291c:	79bb      	ldrb	r3, [r7, #6]
 800291e:	4a25      	ldr	r2, [pc, #148]	; (80029b4 <setled+0xcc>)
 8002920:	5cd1      	ldrb	r1, [r2, r3]
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	2201      	movs	r2, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	79bb      	ldrb	r3, [r7, #6]
 8002932:	400a      	ands	r2, r1
 8002934:	b2d1      	uxtb	r1, r2
 8002936:	4a1f      	ldr	r2, [pc, #124]	; (80029b4 <setled+0xcc>)
 8002938:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	08db      	lsrs	r3, r3, #3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800294a:	2200      	movs	r2, #0
 800294c:	2120      	movs	r1, #32
 800294e:	481a      	ldr	r0, [pc, #104]	; (80029b8 <setled+0xd0>)
 8002950:	f001 f879 	bl	8003a46 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e01b      	b.n	8002992 <setled+0xaa>
	{
		if (i == (num-(n+1)))
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	425b      	negs	r3, r3
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	429a      	cmp	r2, r3
 8002962:	d10d      	bne.n	8002980 <setled+0x98>
		{
			write_byte (((c+1)));
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ff61 	bl	8002834 <write_byte>
			write_byte (buffer[col]);
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <setled+0xcc>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5b 	bl	8002834 <write_byte>
 800297e:	e005      	b.n	800298c <setled+0xa4>
		}
		else
		{
			write_byte (0);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff ff57 	bl	8002834 <write_byte>
			write_byte (0);
 8002986:	2000      	movs	r0, #0
 8002988:	f7ff ff54 	bl	8002834 <write_byte>
	for (int i=0; i<num; i++) 
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	3301      	adds	r3, #1
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	dde0      	ble.n	800295a <setled+0x72>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8002998:	2200      	movs	r2, #0
 800299a:	2120      	movs	r1, #32
 800299c:	4806      	ldr	r0, [pc, #24]	; (80029b8 <setled+0xd0>)
 800299e:	f001 f852 	bl	8003a46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 80029a2:	2201      	movs	r2, #1
 80029a4:	2120      	movs	r1, #32
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <setled+0xd0>)
 80029a8:	f001 f84d 	bl	8003a46 <HAL_GPIO_WritePin>
}
 80029ac:	bf00      	nop
 80029ae:	3718      	adds	r7, #24
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200006bc 	.word	0x200006bc
 80029b8:	40010800 	.word	0x40010800

080029bc <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	460a      	mov	r2, r1
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	4613      	mov	r3, r2
 80029ca:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80029dc:	79bb      	ldrb	r3, [r7, #6]
 80029de:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e02d      	b.n	8002a42 <setrow+0x86>
	{
		if (i == ((n)))
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d120      	bne.n	8002a30 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	3307      	adds	r3, #7
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	e015      	b.n	8002a24 <setrow+0x68>
			{
				bool b = value&0x80;
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	bf14      	ite	ne
 8002a02:	2301      	movne	r3, #1
 8002a04:	2300      	moveq	r3, #0
 8002a06:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	b2d1      	uxtb	r1, r2
 8002a10:	7bba      	ldrb	r2, [r7, #14]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ff68 	bl	80028e8 <setled>
				value<<=1;
 8002a18:	79bb      	ldrb	r3, [r7, #6]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	dae4      	bge.n	80029f8 <setrow+0x3c>
 8002a2e:	e005      	b.n	8002a3c <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7ff feff 	bl	8002834 <write_byte>
			write_byte (0);
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff fefc 	bl	8002834 <write_byte>
	for (int i=0; i<num; i++) 
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	ddce      	ble.n	80029e6 <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	4903      	ldr	r1, [pc, #12]	; (8002a58 <setrow+0x9c>)
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	54ca      	strb	r2, [r1, r3]
}
 8002a50:	bf00      	nop
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	2000070c 	.word	0x2000070c

08002a5c <scroll_char>:
}



void scroll_char (char c,uint32_t speed, char direction)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <scroll_char+0xdc>)
 8002a72:	5cd3      	ldrb	r3, [r2, r3]
 8002a74:	613b      	str	r3, [r7, #16]
	int start= (8*c)+1;	
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
	int row =7;
 8002a7e:	2307      	movs	r3, #7
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
		switch (direction)
 8002a82:	79bb      	ldrb	r3, [r7, #6]
 8002a84:	2b4c      	cmp	r3, #76	; 0x4c
 8002a86:	d002      	beq.n	8002a8e <scroll_char+0x32>
 8002a88:	2b52      	cmp	r3, #82	; 0x52
 8002a8a:	d028      	beq.n	8002ade <scroll_char+0x82>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8002a8c:	e04f      	b.n	8002b2e <scroll_char+0xd2>
					for (int j=start; j<(start+width+1); j++)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	623b      	str	r3, [r7, #32]
 8002a92:	e00f      	b.n	8002ab4 <scroll_char+0x58>
						setrow (row, CH[j]);
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4927      	ldr	r1, [pc, #156]	; (8002b38 <scroll_char+0xdc>)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f7ff ff8a 	bl	80029bc <setrow>
						row--;
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
					for (int j=start; j<(start+width+1); j++)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4413      	add	r3, r2
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dde9      	ble.n	8002a94 <scroll_char+0x38>
					for (int i=0;i<(num*8);i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	e007      	b.n	8002ad6 <scroll_char+0x7a>
						shiftleft();
 8002ac6:	f000 f867 	bl	8002b98 <shiftleft>
						HAL_Delay (speed);
 8002aca:	6838      	ldr	r0, [r7, #0]
 8002acc:	f000 fb9c 	bl	8003208 <HAL_Delay>
					for (int i=0;i<(num*8);i++)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	2b07      	cmp	r3, #7
 8002ada:	ddf4      	ble.n	8002ac6 <scroll_char+0x6a>
						break;
 8002adc:	e027      	b.n	8002b2e <scroll_char+0xd2>
					for (int j=start; j<(start+width+1); j++)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	61bb      	str	r3, [r7, #24]
 8002ae2:	e00f      	b.n	8002b04 <scroll_char+0xa8>
						setrow (row+((num-1)*8), CH[j]);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4913      	ldr	r1, [pc, #76]	; (8002b38 <scroll_char+0xdc>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	440b      	add	r3, r1
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7ff ff62 	bl	80029bc <setrow>
						row--;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	3b01      	subs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
					for (int j=start; j<(start+width+1); j++)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	dde9      	ble.n	8002ae4 <scroll_char+0x88>
					for (int i=0;i<(num*8);i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	e007      	b.n	8002b26 <scroll_char+0xca>
						shiftright();
 8002b16:	f000 f877 	bl	8002c08 <shiftright>
						HAL_Delay (speed);
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f000 fb74 	bl	8003208 <HAL_Delay>
					for (int i=0;i<(num*8);i++)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	3301      	adds	r3, #1
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b07      	cmp	r3, #7
 8002b2a:	ddf4      	ble.n	8002b16 <scroll_char+0xba>
					break;
 8002b2c:	bf00      	nop
			}			
}	
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20000044 	.word	0x20000044

08002b3c <max_clear>:
}



void max_clear(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	e008      	b.n	8002b5a <max_clear+0x1e>
		setrow(i,0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff ff34 	bl	80029bc <setrow>
	for (int i=0; i<num*8; i++) 
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	ddf3      	ble.n	8002b48 <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8002b60:	2300      	movs	r3, #0
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	e00c      	b.n	8002b80 <max_clear+0x44>
	{
		buffer[i] = 0;
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <max_clear+0x54>)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8002b70:	4a08      	ldr	r2, [pc, #32]	; (8002b94 <max_clear+0x58>)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	4413      	add	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b4f      	cmp	r3, #79	; 0x4f
 8002b84:	ddef      	ble.n	8002b66 <max_clear+0x2a>
	}
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200006bc 	.word	0x200006bc
 8002b94:	2000070c 	.word	0x2000070c

08002b98 <shiftleft>:



void shiftleft(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8002ba2:	4a18      	ldr	r2, [pc, #96]	; (8002c04 <shiftleft+0x6c>)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e00c      	b.n	8002bcc <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4913      	ldr	r1, [pc, #76]	; (8002c04 <shiftleft+0x6c>)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	440b      	add	r3, r1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f7ff fefb 	bl	80029bc <setrow>
	for (i=0; i<num*8; i++)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b07      	cmp	r3, #7
 8002bd0:	ddef      	ble.n	8002bb2 <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 8002bd2:	234f      	movs	r3, #79	; 0x4f
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e00b      	b.n	8002bf0 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <shiftleft+0x6c>)
 8002bde:	5cd1      	ldrb	r1, [r2, r3]
 8002be0:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <shiftleft+0x6c>)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4413      	add	r3, r2
 8002be6:	460a      	mov	r2, r1
 8002be8:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	dcf0      	bgt.n	8002bd8 <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 8002bf6:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <shiftleft+0x6c>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	7013      	strb	r3, [r2, #0]
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000070c 	.word	0x2000070c

08002c08 <shiftright>:


void shiftright(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 8002c0e:	2307      	movs	r3, #7
 8002c10:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 8002c12:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <shiftright+0x68>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e00c      	b.n	8002c38 <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4913      	ldr	r1, [pc, #76]	; (8002c70 <shiftright+0x68>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	440b      	add	r3, r1
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	f7ff fec5 	bl	80029bc <setrow>
	for (int i=last; i>=0; i--)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	daef      	bge.n	8002c1e <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	e00b      	b.n	8002c5c <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <shiftright+0x68>)
 8002c4a:	5cd1      	ldrb	r1, [r2, r3]
 8002c4c:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <shiftright+0x68>)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	4413      	add	r3, r2
 8002c52:	460a      	mov	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b4f      	cmp	r3, #79	; 0x4f
 8002c60:	ddf0      	ble.n	8002c44 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8002c62:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <shiftright+0x68>)
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	71d3      	strb	r3, [r2, #7]
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	2000070c 	.word	0x2000070c

08002c74 <max_init>:



void max_init (uint8_t brightness)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2009      	movs	r0, #9
 8002c82:	f7ff fe03 	bl	800288c <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 8002c86:	2107      	movs	r1, #7
 8002c88:	200b      	movs	r0, #11
 8002c8a:	f7ff fdff 	bl	800288c <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8002c8e:	2101      	movs	r1, #1
 8002c90:	200c      	movs	r0, #12
 8002c92:	f7ff fdfb 	bl	800288c <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 8002c96:	2100      	movs	r1, #0
 8002c98:	200f      	movs	r0, #15
 8002c9a:	f7ff fdf7 	bl	800288c <write_max_cmd>
	
	max_clear ();
 8002c9e:	f7ff ff4d 	bl	8002b3c <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	200a      	movs	r0, #10
 8002ca8:	f7ff fdf0 	bl	800288c <write_max_cmd>
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_MspInit+0x5c>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <HAL_MspInit+0x5c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6193      	str	r3, [r2, #24]
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_MspInit+0x5c>)
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_MspInit+0x5c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_MspInit+0x5c>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	61d3      	str	r3, [r2, #28]
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_MspInit+0x5c>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <HAL_MspInit+0x60>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_MspInit+0x60>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40010000 	.word	0x40010000

08002d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <HAL_I2C_MspInit+0x74>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d124      	bne.n	8002d82 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4a14      	ldr	r2, [pc, #80]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d3e:	f043 0308 	orr.w	r3, r3, #8
 8002d42:	6193      	str	r3, [r2, #24]
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d50:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d56:	2312      	movs	r3, #18
 8002d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4619      	mov	r1, r3
 8002d64:	480b      	ldr	r0, [pc, #44]	; (8002d94 <HAL_I2C_MspInit+0x7c>)
 8002d66:	f000 fcc3 	bl	80036f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d74:	61d3      	str	r3, [r2, #28]
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_I2C_MspInit+0x78>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d82:	bf00      	nop
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40005800 	.word	0x40005800
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40010c00 	.word	0x40010c00

08002d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <HAL_TIM_Base_MspInit+0x58>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10c      	bne.n	8002dc4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	4a11      	ldr	r2, [pc, #68]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002db4:	6193      	str	r3, [r2, #24]
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002dc2:	e010      	b.n	8002de6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <HAL_TIM_Base_MspInit+0x60>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10b      	bne.n	8002de6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4a08      	ldr	r2, [pc, #32]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	61d3      	str	r3, [r2, #28]
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_TIM_Base_MspInit+0x5c>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40000400 	.word	0x40000400

08002dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	; (8002eb8 <HAL_TIM_MspPostInit+0xbc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d119      	bne.n	8002e50 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	481d      	ldr	r0, [pc, #116]	; (8002ec0 <HAL_TIM_MspPostInit+0xc4>)
 8002e4a:	f000 fc51 	bl	80036f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e4e:	e02e      	b.n	8002eae <HAL_TIM_MspPostInit+0xb2>
  else if(htim->Instance==TIM3)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_TIM_MspPostInit+0xc8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d129      	bne.n	8002eae <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5a:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e60:	f043 0310 	orr.w	r3, r3, #16
 8002e64:	6193      	str	r3, [r2, #24]
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_TIM_MspPostInit+0xc0>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e72:	2340      	movs	r3, #64	; 0x40
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	4810      	ldr	r0, [pc, #64]	; (8002ec8 <HAL_TIM_MspPostInit+0xcc>)
 8002e86:	f000 fc33 	bl	80036f0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <HAL_TIM_MspPostInit+0xd0>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea8:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <HAL_TIM_MspPostInit+0xd0>)
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	6053      	str	r3, [r2, #4]
}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40011000 	.word	0x40011000
 8002ecc:	40010000 	.word	0x40010000

08002ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_UART_MspInit+0x98>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d137      	bne.n	8002f60 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ef0:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efa:	61d3      	str	r3, [r2, #28]
 8002efc:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6193      	str	r3, [r2, #24]
 8002f14:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_UART_MspInit+0x9c>)
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f20:	2304      	movs	r3, #4
 8002f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	4619      	mov	r1, r3
 8002f32:	480f      	ldr	r0, [pc, #60]	; (8002f70 <HAL_UART_MspInit+0xa0>)
 8002f34:	f000 fbdc 	bl	80036f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4809      	ldr	r0, [pc, #36]	; (8002f70 <HAL_UART_MspInit+0xa0>)
 8002f4c:	f000 fbd0 	bl	80036f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f50:	2200      	movs	r2, #0
 8002f52:	2100      	movs	r1, #0
 8002f54:	2026      	movs	r0, #38	; 0x26
 8002f56:	f000 fa52 	bl	80033fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f5a:	2026      	movs	r0, #38	; 0x26
 8002f5c:	f000 fa6b 	bl	8003436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40004400 	.word	0x40004400
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010800 	.word	0x40010800

08002f74 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002f7a:	f107 0308 	add.w	r3, r7, #8
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	609a      	str	r2, [r3, #8]
 8002f86:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <HAL_FSMC_MspInit+0x78>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d129      	bne.n	8002fe4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_FSMC_MspInit+0x78>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_FSMC_MspInit+0x7c>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_FSMC_MspInit+0x7c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_FSMC_MspInit+0x7c>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	607b      	str	r3, [r7, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002fae:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002fb2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fbc:	f107 0308 	add.w	r3, r7, #8
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	480c      	ldr	r0, [pc, #48]	; (8002ff4 <HAL_FSMC_MspInit+0x80>)
 8002fc4:	f000 fb94 	bl	80036f0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002fc8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002fcc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fd6:	f107 0308 	add.w	r3, r7, #8
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4806      	ldr	r0, [pc, #24]	; (8002ff8 <HAL_FSMC_MspInit+0x84>)
 8002fde:	f000 fb87 	bl	80036f0 <HAL_GPIO_Init>
 8002fe2:	e000      	b.n	8002fe6 <HAL_FSMC_MspInit+0x72>
    return;
 8002fe4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	2000075c 	.word	0x2000075c
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	40011800 	.word	0x40011800
 8002ff8:	40011400 	.word	0x40011400

08002ffc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8003004:	f7ff ffb6 	bl	8002f74 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <NMI_Handler+0x4>

08003016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <MemManage_Handler+0x4>

08003022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler+0x4>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003056:	f000 f8bb 	bl	80031d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}

0800305e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003062:	2080      	movs	r0, #128	; 0x80
 8003064:	f000 fd08 	bl	8003a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <USART2_IRQHandler+0x10>)
 8003072:	f003 f9df 	bl	8006434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200005ac 	.word	0x200005ac

08003080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <_sbrk+0x5c>)
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <_sbrk+0x60>)
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003094:	4b13      	ldr	r3, [pc, #76]	; (80030e4 <_sbrk+0x64>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <_sbrk+0x64>)
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <_sbrk+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030a2:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d207      	bcs.n	80030c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b0:	f003 febe 	bl	8006e30 <__errno>
 80030b4:	4603      	mov	r3, r0
 80030b6:	220c      	movs	r2, #12
 80030b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030be:	e009      	b.n	80030d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030c6:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <_sbrk+0x64>)
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <_sbrk+0x64>)
 80030d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20010000 	.word	0x20010000
 80030e0:	00000400 	.word	0x00000400
 80030e4:	20000760 	.word	0x20000760
 80030e8:	20000778 	.word	0x20000778

080030ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030f8:	480c      	ldr	r0, [pc, #48]	; (800312c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030fa:	490d      	ldr	r1, [pc, #52]	; (8003130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030fc:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003100:	e002      	b.n	8003108 <LoopCopyDataInit>

08003102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003106:	3304      	adds	r3, #4

08003108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800310a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800310c:	d3f9      	bcc.n	8003102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003110:	4c0a      	ldr	r4, [pc, #40]	; (800313c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003114:	e001      	b.n	800311a <LoopFillZerobss>

08003116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003118:	3204      	adds	r2, #4

0800311a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800311a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800311c:	d3fb      	bcc.n	8003116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800311e:	f7ff ffe5 	bl	80030ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003122:	f003 fe8b 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003126:	f7fe fafb 	bl	8001720 <main>
  bx lr
 800312a:	4770      	bx	lr
  ldr r0, =_sdata
 800312c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003130:	200004ac 	.word	0x200004ac
  ldr r2, =_sidata
 8003134:	08007fa4 	.word	0x08007fa4
  ldr r2, =_sbss
 8003138:	200004ac 	.word	0x200004ac
  ldr r4, =_ebss
 800313c:	20000778 	.word	0x20000778

08003140 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003140:	e7fe      	b.n	8003140 <ADC1_2_IRQHandler>
	...

08003144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_Init+0x28>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a07      	ldr	r2, [pc, #28]	; (800316c <HAL_Init+0x28>)
 800314e:	f043 0310 	orr.w	r3, r3, #16
 8003152:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003154:	2003      	movs	r0, #3
 8003156:	f000 f947 	bl	80033e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800315a:	200f      	movs	r0, #15
 800315c:	f000 f808 	bl	8003170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003160:	f7ff fda8 	bl	8002cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40022000 	.word	0x40022000

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003178:	4b12      	ldr	r3, [pc, #72]	; (80031c4 <HAL_InitTick+0x54>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b12      	ldr	r3, [pc, #72]	; (80031c8 <HAL_InitTick+0x58>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4619      	mov	r1, r3
 8003182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003186:	fbb3 f3f1 	udiv	r3, r3, r1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f95f 	bl	8003452 <HAL_SYSTICK_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e00e      	b.n	80031bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d80a      	bhi.n	80031ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a4:	2200      	movs	r2, #0
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ac:	f000 f927 	bl	80033fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <HAL_InitTick+0x5c>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000043c 	.word	0x2000043c
 80031c8:	20000444 	.word	0x20000444
 80031cc:	20000440 	.word	0x20000440

080031d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_IncTick+0x1c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_IncTick+0x20>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <HAL_IncTick+0x20>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr
 80031ec:	20000444 	.word	0x20000444
 80031f0:	20000764 	.word	0x20000764

080031f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return uwTick;
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_GetTick+0x10>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000764 	.word	0x20000764

08003208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff fff0 	bl	80031f4 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003220:	d005      	beq.n	800322e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <HAL_Delay+0x44>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800322e:	bf00      	nop
 8003230:	f7ff ffe0 	bl	80031f4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d8f7      	bhi.n	8003230 <HAL_Delay+0x28>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000444 	.word	0x20000444

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4906      	ldr	r1, [pc, #24]	; (80032e8 <__NVIC_EnableIRQ+0x34>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	; (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	; (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	; 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b4:	d301      	bcc.n	80033ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00f      	b.n	80033da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <SysTick_Config+0x40>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c2:	210f      	movs	r1, #15
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c8:	f7ff ff90 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <SysTick_Config+0x40>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <SysTick_Config+0x40>)
 80033d4:	2207      	movs	r2, #7
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff ff2d 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fe:	b580      	push	{r7, lr}
 8003400:	b086      	sub	sp, #24
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003410:	f7ff ff42 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	6978      	ldr	r0, [r7, #20]
 800341c:	f7ff ff90 	bl	8003340 <NVIC_EncodePriority>
 8003420:	4602      	mov	r2, r0
 8003422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff5f 	bl	80032ec <__NVIC_SetPriority>
}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff35 	bl	80032b4 <__NVIC_EnableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa2 	bl	80033a4 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346a:	b480      	push	{r7}
 800346c:	b085      	sub	sp, #20
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800347c:	2b02      	cmp	r3, #2
 800347e:	d008      	beq.n	8003492 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e020      	b.n	80034d4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020e 	bic.w	r2, r2, #14
 80034a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f202 	lsl.w	r2, r1, r2
 80034c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d005      	beq.n	8003502 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2204      	movs	r2, #4
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e0d6      	b.n	80036b0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 020e 	bic.w	r2, r2, #14
 8003510:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0201 	bic.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <HAL_DMA_Abort_IT+0x1dc>)
 800352a:	429a      	cmp	r2, r3
 800352c:	d958      	bls.n	80035e0 <HAL_DMA_Abort_IT+0x100>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a63      	ldr	r2, [pc, #396]	; (80036c0 <HAL_DMA_Abort_IT+0x1e0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04f      	beq.n	80035d8 <HAL_DMA_Abort_IT+0xf8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a61      	ldr	r2, [pc, #388]	; (80036c4 <HAL_DMA_Abort_IT+0x1e4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d048      	beq.n	80035d4 <HAL_DMA_Abort_IT+0xf4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <HAL_DMA_Abort_IT+0x1e8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_Abort_IT+0xee>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5e      	ldr	r2, [pc, #376]	; (80036cc <HAL_DMA_Abort_IT+0x1ec>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d038      	beq.n	80035c8 <HAL_DMA_Abort_IT+0xe8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5d      	ldr	r2, [pc, #372]	; (80036d0 <HAL_DMA_Abort_IT+0x1f0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d030      	beq.n	80035c2 <HAL_DMA_Abort_IT+0xe2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a5b      	ldr	r2, [pc, #364]	; (80036d4 <HAL_DMA_Abort_IT+0x1f4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d028      	beq.n	80035bc <HAL_DMA_Abort_IT+0xdc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a53      	ldr	r2, [pc, #332]	; (80036bc <HAL_DMA_Abort_IT+0x1dc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d020      	beq.n	80035b6 <HAL_DMA_Abort_IT+0xd6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a57      	ldr	r2, [pc, #348]	; (80036d8 <HAL_DMA_Abort_IT+0x1f8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d019      	beq.n	80035b2 <HAL_DMA_Abort_IT+0xd2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_DMA_Abort_IT+0x1fc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d012      	beq.n	80035ae <HAL_DMA_Abort_IT+0xce>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a54      	ldr	r2, [pc, #336]	; (80036e0 <HAL_DMA_Abort_IT+0x200>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00a      	beq.n	80035a8 <HAL_DMA_Abort_IT+0xc8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a53      	ldr	r2, [pc, #332]	; (80036e4 <HAL_DMA_Abort_IT+0x204>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d102      	bne.n	80035a2 <HAL_DMA_Abort_IT+0xc2>
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	e01b      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a6:	e018      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ac:	e015      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035ae:	2310      	movs	r3, #16
 80035b0:	e013      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035b2:	2301      	movs	r3, #1
 80035b4:	e011      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035ba:	e00e      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c0:	e00b      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c6:	e008      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035cc:	e005      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035d2:	e002      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035d4:	2310      	movs	r3, #16
 80035d6:	e000      	b.n	80035da <HAL_DMA_Abort_IT+0xfa>
 80035d8:	2301      	movs	r3, #1
 80035da:	4a43      	ldr	r2, [pc, #268]	; (80036e8 <HAL_DMA_Abort_IT+0x208>)
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	e057      	b.n	8003690 <HAL_DMA_Abort_IT+0x1b0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <HAL_DMA_Abort_IT+0x1e0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d04f      	beq.n	800368a <HAL_DMA_Abort_IT+0x1aa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <HAL_DMA_Abort_IT+0x1e4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d048      	beq.n	8003686 <HAL_DMA_Abort_IT+0x1a6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <HAL_DMA_Abort_IT+0x1e8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d040      	beq.n	8003680 <HAL_DMA_Abort_IT+0x1a0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_DMA_Abort_IT+0x1ec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d038      	beq.n	800367a <HAL_DMA_Abort_IT+0x19a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_DMA_Abort_IT+0x1f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d030      	beq.n	8003674 <HAL_DMA_Abort_IT+0x194>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2f      	ldr	r2, [pc, #188]	; (80036d4 <HAL_DMA_Abort_IT+0x1f4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d028      	beq.n	800366e <HAL_DMA_Abort_IT+0x18e>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_DMA_Abort_IT+0x1dc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d020      	beq.n	8003668 <HAL_DMA_Abort_IT+0x188>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <HAL_DMA_Abort_IT+0x1f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d019      	beq.n	8003664 <HAL_DMA_Abort_IT+0x184>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a29      	ldr	r2, [pc, #164]	; (80036dc <HAL_DMA_Abort_IT+0x1fc>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d012      	beq.n	8003660 <HAL_DMA_Abort_IT+0x180>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <HAL_DMA_Abort_IT+0x200>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00a      	beq.n	800365a <HAL_DMA_Abort_IT+0x17a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_DMA_Abort_IT+0x204>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d102      	bne.n	8003654 <HAL_DMA_Abort_IT+0x174>
 800364e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003652:	e01b      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003658:	e018      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 800365a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800365e:	e015      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003660:	2310      	movs	r3, #16
 8003662:	e013      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003664:	2301      	movs	r3, #1
 8003666:	e011      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800366c:	e00e      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 800366e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003672:	e00b      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003678:	e008      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 800367a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800367e:	e005      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003684:	e002      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 8003686:	2310      	movs	r3, #16
 8003688:	e000      	b.n	800368c <HAL_DMA_Abort_IT+0x1ac>
 800368a:	2301      	movs	r3, #1
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <HAL_DMA_Abort_IT+0x20c>)
 800368e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
    } 
  }
  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40020080 	.word	0x40020080
 80036c0:	40020008 	.word	0x40020008
 80036c4:	4002001c 	.word	0x4002001c
 80036c8:	40020030 	.word	0x40020030
 80036cc:	40020044 	.word	0x40020044
 80036d0:	40020058 	.word	0x40020058
 80036d4:	4002006c 	.word	0x4002006c
 80036d8:	40020408 	.word	0x40020408
 80036dc:	4002041c 	.word	0x4002041c
 80036e0:	40020430 	.word	0x40020430
 80036e4:	40020444 	.word	0x40020444
 80036e8:	40020400 	.word	0x40020400
 80036ec:	40020000 	.word	0x40020000

080036f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b08b      	sub	sp, #44	; 0x2c
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003702:	e179      	b.n	80039f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003704:	2201      	movs	r2, #1
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	429a      	cmp	r2, r3
 800371e:	f040 8168 	bne.w	80039f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	4a96      	ldr	r2, [pc, #600]	; (8003980 <HAL_GPIO_Init+0x290>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d05e      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 800372c:	4a94      	ldr	r2, [pc, #592]	; (8003980 <HAL_GPIO_Init+0x290>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d875      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003732:	4a94      	ldr	r2, [pc, #592]	; (8003984 <HAL_GPIO_Init+0x294>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d058      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003738:	4a92      	ldr	r2, [pc, #584]	; (8003984 <HAL_GPIO_Init+0x294>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d86f      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800373e:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_GPIO_Init+0x298>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d052      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003744:	4a90      	ldr	r2, [pc, #576]	; (8003988 <HAL_GPIO_Init+0x298>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d869      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800374a:	4a90      	ldr	r2, [pc, #576]	; (800398c <HAL_GPIO_Init+0x29c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d04c      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 8003750:	4a8e      	ldr	r2, [pc, #568]	; (800398c <HAL_GPIO_Init+0x29c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d863      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003756:	4a8e      	ldr	r2, [pc, #568]	; (8003990 <HAL_GPIO_Init+0x2a0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d046      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
 800375c:	4a8c      	ldr	r2, [pc, #560]	; (8003990 <HAL_GPIO_Init+0x2a0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d85d      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 8003762:	2b12      	cmp	r3, #18
 8003764:	d82a      	bhi.n	80037bc <HAL_GPIO_Init+0xcc>
 8003766:	2b12      	cmp	r3, #18
 8003768:	d859      	bhi.n	800381e <HAL_GPIO_Init+0x12e>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <HAL_GPIO_Init+0x80>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	080037eb 	.word	0x080037eb
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037d7 	.word	0x080037d7
 800377c:	08003819 	.word	0x08003819
 8003780:	0800381f 	.word	0x0800381f
 8003784:	0800381f 	.word	0x0800381f
 8003788:	0800381f 	.word	0x0800381f
 800378c:	0800381f 	.word	0x0800381f
 8003790:	0800381f 	.word	0x0800381f
 8003794:	0800381f 	.word	0x0800381f
 8003798:	0800381f 	.word	0x0800381f
 800379c:	0800381f 	.word	0x0800381f
 80037a0:	0800381f 	.word	0x0800381f
 80037a4:	0800381f 	.word	0x0800381f
 80037a8:	0800381f 	.word	0x0800381f
 80037ac:	0800381f 	.word	0x0800381f
 80037b0:	0800381f 	.word	0x0800381f
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	4a75      	ldr	r2, [pc, #468]	; (8003994 <HAL_GPIO_Init+0x2a4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037c2:	e02c      	b.n	800381e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	623b      	str	r3, [r7, #32]
          break;
 80037ca:	e029      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	3304      	adds	r3, #4
 80037d2:	623b      	str	r3, [r7, #32]
          break;
 80037d4:	e024      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	3308      	adds	r3, #8
 80037dc:	623b      	str	r3, [r7, #32]
          break;
 80037de:	e01f      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	330c      	adds	r3, #12
 80037e6:	623b      	str	r3, [r7, #32]
          break;
 80037e8:	e01a      	b.n	8003820 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d102      	bne.n	80037f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037f2:	2304      	movs	r3, #4
 80037f4:	623b      	str	r3, [r7, #32]
          break;
 80037f6:	e013      	b.n	8003820 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003800:	2308      	movs	r3, #8
 8003802:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69fa      	ldr	r2, [r7, #28]
 8003808:	611a      	str	r2, [r3, #16]
          break;
 800380a:	e009      	b.n	8003820 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800380c:	2308      	movs	r3, #8
 800380e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	615a      	str	r2, [r3, #20]
          break;
 8003816:	e003      	b.n	8003820 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003818:	2300      	movs	r3, #0
 800381a:	623b      	str	r3, [r7, #32]
          break;
 800381c:	e000      	b.n	8003820 <HAL_GPIO_Init+0x130>
          break;
 800381e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	2bff      	cmp	r3, #255	; 0xff
 8003824:	d801      	bhi.n	800382a <HAL_GPIO_Init+0x13a>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	e001      	b.n	800382e <HAL_GPIO_Init+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3304      	adds	r3, #4
 800382e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2bff      	cmp	r3, #255	; 0xff
 8003834:	d802      	bhi.n	800383c <HAL_GPIO_Init+0x14c>
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x152>
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	3b08      	subs	r3, #8
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	210f      	movs	r1, #15
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	fa01 f303 	lsl.w	r3, r1, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	401a      	ands	r2, r3
 8003854:	6a39      	ldr	r1, [r7, #32]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	fa01 f303 	lsl.w	r3, r1, r3
 800385c:	431a      	orrs	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80c1 	beq.w	80039f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003870:	4b49      	ldr	r3, [pc, #292]	; (8003998 <HAL_GPIO_Init+0x2a8>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a48      	ldr	r2, [pc, #288]	; (8003998 <HAL_GPIO_Init+0x2a8>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <HAL_GPIO_Init+0x2a8>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003888:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_GPIO_Init+0x2ac>)
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3c      	ldr	r2, [pc, #240]	; (80039a0 <HAL_GPIO_Init+0x2b0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d01f      	beq.n	80038f4 <HAL_GPIO_Init+0x204>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <HAL_GPIO_Init+0x2b4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d019      	beq.n	80038f0 <HAL_GPIO_Init+0x200>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a3a      	ldr	r2, [pc, #232]	; (80039a8 <HAL_GPIO_Init+0x2b8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d013      	beq.n	80038ec <HAL_GPIO_Init+0x1fc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a39      	ldr	r2, [pc, #228]	; (80039ac <HAL_GPIO_Init+0x2bc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00d      	beq.n	80038e8 <HAL_GPIO_Init+0x1f8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <HAL_GPIO_Init+0x2c0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <HAL_GPIO_Init+0x1f4>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <HAL_GPIO_Init+0x2c4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_GPIO_Init+0x1f0>
 80038dc:	2305      	movs	r3, #5
 80038de:	e00a      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e0:	2306      	movs	r3, #6
 80038e2:	e008      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e4:	2304      	movs	r3, #4
 80038e6:	e006      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038e8:	2303      	movs	r3, #3
 80038ea:	e004      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e002      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_GPIO_Init+0x206>
 80038f4:	2300      	movs	r3, #0
 80038f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f8:	f002 0203 	and.w	r2, r2, #3
 80038fc:	0092      	lsls	r2, r2, #2
 80038fe:	4093      	lsls	r3, r2
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003906:	4925      	ldr	r1, [pc, #148]	; (800399c <HAL_GPIO_Init+0x2ac>)
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	089b      	lsrs	r3, r3, #2
 800390c:	3302      	adds	r3, #2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4924      	ldr	r1, [pc, #144]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800392e:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	43db      	mvns	r3, r3
 8003936:	4920      	ldr	r1, [pc, #128]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003938:	4013      	ands	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	491a      	ldr	r1, [pc, #104]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	e006      	b.n	8003964 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003956:	4b18      	ldr	r3, [pc, #96]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	43db      	mvns	r3, r3
 800395e:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003960:	4013      	ands	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d025      	beq.n	80039bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4910      	ldr	r1, [pc, #64]	; (80039b8 <HAL_GPIO_Init+0x2c8>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]
 800397c:	e025      	b.n	80039ca <HAL_GPIO_Init+0x2da>
 800397e:	bf00      	nop
 8003980:	10320000 	.word	0x10320000
 8003984:	10310000 	.word	0x10310000
 8003988:	10220000 	.word	0x10220000
 800398c:	10210000 	.word	0x10210000
 8003990:	10120000 	.word	0x10120000
 8003994:	10110000 	.word	0x10110000
 8003998:	40021000 	.word	0x40021000
 800399c:	40010000 	.word	0x40010000
 80039a0:	40010800 	.word	0x40010800
 80039a4:	40010c00 	.word	0x40010c00
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	40011800 	.word	0x40011800
 80039b4:	40011c00 	.word	0x40011c00
 80039b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039bc:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	4913      	ldr	r1, [pc, #76]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	490e      	ldr	r1, [pc, #56]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60cb      	str	r3, [r1, #12]
 80039e2:	e006      	b.n	80039f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039e4:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	4909      	ldr	r1, [pc, #36]	; (8003a14 <HAL_GPIO_Init+0x324>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	3301      	adds	r3, #1
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f ae7e 	bne.w	8003704 <HAL_GPIO_Init+0x14>
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	372c      	adds	r7, #44	; 0x2c
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	40010400 	.word	0x40010400

08003a18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	887b      	ldrh	r3, [r7, #2]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e001      	b.n	8003a3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	807b      	strh	r3, [r7, #2]
 8003a52:	4613      	mov	r3, r2
 8003a54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a56:	787b      	ldrb	r3, [r7, #1]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a5c:	887a      	ldrh	r2, [r7, #2]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a62:	e003      	b.n	8003a6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	611a      	str	r2, [r3, #16]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr
	...

08003a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fd fdd8 	bl	800164c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e12b      	b.n	8003d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff f922 	bl	8002d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2224      	movs	r2, #36	; 0x24
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f001 fba0 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8003b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4a81      	ldr	r2, [pc, #516]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d807      	bhi.n	8003b2c <HAL_I2C_Init+0x84>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a80      	ldr	r2, [pc, #512]	; (8003d20 <HAL_I2C_Init+0x278>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	bf94      	ite	ls
 8003b24:	2301      	movls	r3, #1
 8003b26:	2300      	movhi	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e006      	b.n	8003b3a <HAL_I2C_Init+0x92>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a7d      	ldr	r2, [pc, #500]	; (8003d24 <HAL_I2C_Init+0x27c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	bf94      	ite	ls
 8003b34:	2301      	movls	r3, #1
 8003b36:	2300      	movhi	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0e7      	b.n	8003d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4a78      	ldr	r2, [pc, #480]	; (8003d28 <HAL_I2C_Init+0x280>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9b      	lsrs	r3, r3, #18
 8003b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a6a      	ldr	r2, [pc, #424]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d802      	bhi.n	8003b7c <HAL_I2C_Init+0xd4>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	e009      	b.n	8003b90 <HAL_I2C_Init+0xe8>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	4a69      	ldr	r2, [pc, #420]	; (8003d2c <HAL_I2C_Init+0x284>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	3301      	adds	r3, #1
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	495c      	ldr	r1, [pc, #368]	; (8003d1c <HAL_I2C_Init+0x274>)
 8003bac:	428b      	cmp	r3, r1
 8003bae:	d819      	bhi.n	8003be4 <HAL_I2C_Init+0x13c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e59      	subs	r1, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_I2C_Init+0x138>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	1e59      	subs	r1, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bde:	e051      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003be0:	2304      	movs	r3, #4
 8003be2:	e04f      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d111      	bne.n	8003c10 <HAL_I2C_Init+0x168>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	440b      	add	r3, r1
 8003bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e012      	b.n	8003c36 <HAL_I2C_Init+0x18e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	1e58      	subs	r0, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_I2C_Init+0x196>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e022      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10e      	bne.n	8003c64 <HAL_I2C_Init+0x1bc>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1e58      	subs	r0, r3, #1
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	460b      	mov	r3, r1
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	440b      	add	r3, r1
 8003c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c62:	e00f      	b.n	8003c84 <HAL_I2C_Init+0x1dc>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	0099      	lsls	r1, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	6809      	ldr	r1, [r1, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6911      	ldr	r1, [r2, #16]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68d2      	ldr	r2, [r2, #12]
 8003cbe:	4311      	orrs	r1, r2
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	000186a0 	.word	0x000186a0
 8003d20:	001e847f 	.word	0x001e847f
 8003d24:	003d08ff 	.word	0x003d08ff
 8003d28:	431bde83 	.word	0x431bde83
 8003d2c:	10624dd3 	.word	0x10624dd3

08003d30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d4a:	f7ff fa53 	bl	80031f4 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	f040 80d9 	bne.w	8003f10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2319      	movs	r3, #25
 8003d64:	2201      	movs	r2, #1
 8003d66:	496d      	ldr	r1, [pc, #436]	; (8003f1c <HAL_I2C_Mem_Write+0x1ec>)
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 fcc1 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0cc      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d101      	bne.n	8003d86 <HAL_I2C_Mem_Write+0x56>
 8003d82:	2302      	movs	r3, #2
 8003d84:	e0c5      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d007      	beq.n	8003dac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2221      	movs	r2, #33	; 0x21
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a3a      	ldr	r2, [r7, #32]
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a4d      	ldr	r2, [pc, #308]	; (8003f20 <HAL_I2C_Mem_Write+0x1f0>)
 8003dec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dee:	88f8      	ldrh	r0, [r7, #6]
 8003df0:	893a      	ldrh	r2, [r7, #8]
 8003df2:	8979      	ldrh	r1, [r7, #10]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 faf8 	bl	80043f4 <I2C_RequestMemoryWrite>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d052      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e081      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fd42 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11b      	bne.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1aa      	bne.n	8003e0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fd2e 	bl	800491e <I2C_WaitOnBTFFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d107      	bne.n	8003ee0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ede:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e016      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	00100002 	.word	0x00100002
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	4611      	mov	r1, r2
 8003f30:	461a      	mov	r2, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	817b      	strh	r3, [r7, #10]
 8003f36:	460b      	mov	r3, r1
 8003f38:	813b      	strh	r3, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f42:	f7ff f957 	bl	80031f4 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	f040 8244 	bne.w	80043de <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2319      	movs	r3, #25
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4982      	ldr	r1, [pc, #520]	; (8004168 <HAL_I2C_Mem_Read+0x244>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fbc5 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e237      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_I2C_Mem_Read+0x5a>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e230      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d007      	beq.n	8003fa4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f042 0201 	orr.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2222      	movs	r2, #34	; 0x22
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2240      	movs	r2, #64	; 0x40
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a62      	ldr	r2, [pc, #392]	; (800416c <HAL_I2C_Mem_Read+0x248>)
 8003fe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fe6:	88f8      	ldrh	r0, [r7, #6]
 8003fe8:	893a      	ldrh	r2, [r7, #8]
 8003fea:	8979      	ldrh	r1, [r7, #10]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa92 	bl	8004520 <I2C_RequestMemoryRead>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e1ec      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	2b00      	cmp	r3, #0
 800400c:	d113      	bne.n	8004036 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400e:	2300      	movs	r3, #0
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	e1c0      	b.n	80043b8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800403a:	2b01      	cmp	r3, #1
 800403c:	d11e      	bne.n	800407c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800404e:	b672      	cpsid	i
}
 8004050:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004078:	b662      	cpsie	i
}
 800407a:	e035      	b.n	80040e8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004080:	2b02      	cmp	r3, #2
 8004082:	d11e      	bne.n	80040c2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004092:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004094:	b672      	cpsid	i
}
 8004096:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040be:	b662      	cpsie	i
}
 80040c0:	e012      	b.n	80040e8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80040e8:	e166      	b.n	80043b8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	f200 811f 	bhi.w	8004332 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d123      	bne.n	8004144 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fc4d 	bl	80049a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e167      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004142:	e139      	b.n	80043b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	2b02      	cmp	r3, #2
 800414a:	d152      	bne.n	80041f2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004152:	2200      	movs	r2, #0
 8004154:	4906      	ldr	r1, [pc, #24]	; (8004170 <HAL_I2C_Mem_Read+0x24c>)
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 faca 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d008      	beq.n	8004174 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e13c      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
 8004166:	bf00      	nop
 8004168:	00100002 	.word	0x00100002
 800416c:	ffff0000 	.word	0xffff0000
 8004170:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004174:	b672      	cpsid	i
}
 8004176:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ba:	b662      	cpsie	i
}
 80041bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041f0:	e0e2      	b.n	80043b8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2200      	movs	r2, #0
 80041fa:	497b      	ldr	r1, [pc, #492]	; (80043e8 <HAL_I2C_Mem_Read+0x4c4>)
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 fa77 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0e9      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800421c:	b672      	cpsid	i
}
 800421e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691a      	ldr	r2, [r3, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004252:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_I2C_Mem_Read+0x4c8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	08db      	lsrs	r3, r3, #3
 8004258:	4a65      	ldr	r2, [pc, #404]	; (80043f0 <HAL_I2C_Mem_Read+0x4cc>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0a1a      	lsrs	r2, r3, #8
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00da      	lsls	r2, r3, #3
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	3b01      	subs	r3, #1
 8004270:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d118      	bne.n	80042aa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800429a:	b662      	cpsie	i
}
 800429c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e09a      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d1d9      	bne.n	800426c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042fa:	b662      	cpsie	i
}
 80042fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	b2d2      	uxtb	r2, r2
 800430a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004330:	e042      	b.n	80043b8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fb32 	bl	80049a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e04c      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d118      	bne.n	80043b8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f47f ae94 	bne.w	80040ea <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80043de:	2302      	movs	r3, #2
  }
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00010004 	.word	0x00010004
 80043ec:	2000043c 	.word	0x2000043c
 80043f0:	14f8b589 	.word	0x14f8b589

080043f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	461a      	mov	r2, r3
 8004402:	4603      	mov	r3, r0
 8004404:	817b      	strh	r3, [r7, #10]
 8004406:	460b      	mov	r3, r1
 8004408:	813b      	strh	r3, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	2200      	movs	r2, #0
 8004426:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f960 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00d      	beq.n	8004452 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004444:	d103      	bne.n	800444e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800444c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e05f      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004452:	897b      	ldrh	r3, [r7, #10]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004460:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	492d      	ldr	r1, [pc, #180]	; (800451c <I2C_RequestMemoryWrite+0x128>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f998 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e04c      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004490:	6a39      	ldr	r1, [r7, #32]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fa02 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d107      	bne.n	80044b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e02b      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044c0:	893b      	ldrh	r3, [r7, #8]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e021      	b.n	8004510 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044dc:	6a39      	ldr	r1, [r7, #32]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f9dc 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00d      	beq.n	8004506 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d107      	bne.n	8004502 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004500:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e005      	b.n	8004512 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004506:	893b      	ldrh	r3, [r7, #8]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	00010002 	.word	0x00010002

08004520 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	4608      	mov	r0, r1
 800452a:	4611      	mov	r1, r2
 800452c:	461a      	mov	r2, r3
 800452e:	4603      	mov	r3, r0
 8004530:	817b      	strh	r3, [r7, #10]
 8004532:	460b      	mov	r3, r1
 8004534:	813b      	strh	r3, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004548:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2200      	movs	r2, #0
 8004562:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8c2 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d103      	bne.n	800458a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004588:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0aa      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800458e:	897b      	ldrh	r3, [r7, #10]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800459c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	6a3a      	ldr	r2, [r7, #32]
 80045a2:	4952      	ldr	r1, [pc, #328]	; (80046ec <I2C_RequestMemoryRead+0x1cc>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f8fa 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e097      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045cc:	6a39      	ldr	r1, [r7, #32]
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f964 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d107      	bne.n	80045f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e076      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]
 8004606:	e021      	b.n	800464c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004618:	6a39      	ldr	r1, [r7, #32]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f93e 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00d      	beq.n	8004642 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	2b04      	cmp	r3, #4
 800462c:	d107      	bne.n	800463e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e050      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004642:	893b      	ldrh	r3, [r7, #8]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464e:	6a39      	ldr	r1, [r7, #32]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f923 	bl	800489c <I2C_WaitOnTXEFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00d      	beq.n	8004678 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	2b04      	cmp	r3, #4
 8004662:	d107      	bne.n	8004674 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004672:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e035      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f82b 	bl	80046f0 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e013      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046bc:	897b      	ldrh	r3, [r7, #10]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	4906      	ldr	r1, [pc, #24]	; (80046ec <I2C_RequestMemoryRead+0x1cc>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f863 	bl	800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00010002 	.word	0x00010002

080046f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004700:	e025      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004708:	d021      	beq.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fe fd73 	bl	80031f4 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d116      	bne.n	800474e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e023      	b.n	8004796 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d10d      	bne.n	8004774 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4013      	ands	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf0c      	ite	eq
 800476a:	2301      	moveq	r3, #1
 800476c:	2300      	movne	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	461a      	mov	r2, r3
 8004772:	e00c      	b.n	800478e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	429a      	cmp	r2, r3
 8004792:	d0b6      	beq.n	8004702 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047ac:	e051      	b.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d123      	bne.n	8004806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0204 	orr.w	r2, r3, #4
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e046      	b.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480c:	d021      	beq.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fe fcf1 	bl	80031f4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d116      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0220 	orr.w	r2, r3, #32
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e020      	b.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10c      	bne.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	43da      	mvns	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4013      	ands	r3, r2
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	e00b      	b.n	800488e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	43da      	mvns	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	4013      	ands	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d18d      	bne.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048a8:	e02d      	b.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8ce 	bl	8004a4c <I2C_IsAcknowledgeFailed>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e02d      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048c0:	d021      	beq.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe fc97 	bl	80031f4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d116      	bne.n	8004906 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f043 0220 	orr.w	r2, r3, #32
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e007      	b.n	8004916 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d1ca      	bne.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492a:	e02d      	b.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f88d 	bl	8004a4c <I2C_IsAcknowledgeFailed>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e02d      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004942:	d021      	beq.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004944:	f7fe fc56 	bl	80031f4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	f043 0220 	orr.w	r2, r3, #32
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e007      	b.n	8004998 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d1ca      	bne.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049ac:	e042      	b.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d119      	bne.n	80049f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0210 	mvn.w	r2, #16
 80049c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e029      	b.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f0:	f7fe fc00 	bl	80031f4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e007      	b.n	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d1b5      	bne.n	80049ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d11b      	bne.n	8004a9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f043 0204 	orr.w	r2, r3, #4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e272      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8087 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac8:	4b92      	ldr	r3, [pc, #584]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d00c      	beq.n	8004aee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ad4:	4b8f      	ldr	r3, [pc, #572]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 030c 	and.w	r3, r3, #12
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d112      	bne.n	8004b06 <HAL_RCC_OscConfig+0x5e>
 8004ae0:	4b8c      	ldr	r3, [pc, #560]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d10b      	bne.n	8004b06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aee:	4b89      	ldr	r3, [pc, #548]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d06c      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x12c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d168      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e24c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0e:	d106      	bne.n	8004b1e <HAL_RCC_OscConfig+0x76>
 8004b10:	4b80      	ldr	r3, [pc, #512]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7f      	ldr	r2, [pc, #508]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e02e      	b.n	8004b7c <HAL_RCC_OscConfig+0xd4>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCC_OscConfig+0x98>
 8004b26:	4b7b      	ldr	r3, [pc, #492]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7a      	ldr	r2, [pc, #488]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4b78      	ldr	r3, [pc, #480]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a77      	ldr	r2, [pc, #476]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	e01d      	b.n	8004b7c <HAL_RCC_OscConfig+0xd4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0xbc>
 8004b4a:	4b72      	ldr	r3, [pc, #456]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a71      	ldr	r2, [pc, #452]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b6f      	ldr	r3, [pc, #444]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6e      	ldr	r2, [pc, #440]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0xd4>
 8004b64:	4b6b      	ldr	r3, [pc, #428]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b68      	ldr	r3, [pc, #416]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a67      	ldr	r2, [pc, #412]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fe fb36 	bl	80031f4 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b8c:	f7fe fb32 	bl	80031f4 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b64      	cmp	r3, #100	; 0x64
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e200      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xe4>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bac:	f7fe fb22 	bl	80031f4 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb4:	f7fe fb1e 	bl	80031f4 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	; 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e1ec      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc6:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x10c>
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d063      	beq.n	8004caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004be2:	4b4c      	ldr	r3, [pc, #304]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bee:	4b49      	ldr	r3, [pc, #292]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b08      	cmp	r3, #8
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x18c>
 8004bfa:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x176>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1c0      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4939      	ldr	r1, [pc, #228]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b36      	ldr	r3, [pc, #216]	; (8004d18 <HAL_RCC_OscConfig+0x270>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7fe fad7 	bl	80031f4 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe fad3 	bl	80031f4 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1a1      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4927      	ldr	r1, [pc, #156]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCC_OscConfig+0x270>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fe fab6 	bl	80031f4 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fe fab2 	bl	80031f4 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e180      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03a      	beq.n	8004d2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d019      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_RCC_OscConfig+0x274>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc4:	f7fe fa96 	bl	80031f4 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fa92 	bl	80031f4 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e160      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cea:	2001      	movs	r0, #1
 8004cec:	f000 fad8 	bl	80052a0 <RCC_Delay>
 8004cf0:	e01c      	b.n	8004d2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <HAL_RCC_OscConfig+0x274>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cf8:	f7fe fa7c 	bl	80031f4 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cfe:	e00f      	b.n	8004d20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d00:	f7fe fa78 	bl	80031f4 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d908      	bls.n	8004d20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e146      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	42420000 	.word	0x42420000
 8004d1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d20:	4b92      	ldr	r3, [pc, #584]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e9      	bne.n	8004d00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80a6 	beq.w	8004e86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4a87      	ldr	r2, [pc, #540]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	61d3      	str	r3, [r2, #28]
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d66:	4b82      	ldr	r3, [pc, #520]	; (8004f70 <HAL_RCC_OscConfig+0x4c8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d72:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4c8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_RCC_OscConfig+0x4c8>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fa39 	bl	80031f4 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fe fa35 	bl	80031f4 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	; 0x64
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e103      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	4b75      	ldr	r3, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x4c8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x312>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	e02d      	b.n	8004e16 <HAL_RCC_OscConfig+0x36e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x334>
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	6213      	str	r3, [r2, #32]
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	6213      	str	r3, [r2, #32]
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x36e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x356>
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6213      	str	r3, [r2, #32]
 8004df0:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6213      	str	r3, [r2, #32]
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x36e>
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	4a5a      	ldr	r2, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6213      	str	r3, [r2, #32]
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7fe f9e9 	bl	80031f4 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fe f9e5 	bl	80031f4 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0b1      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x37e>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4a:	f7fe f9d3 	bl	80031f4 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fe f9cf 	bl	80031f4 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e09b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 8087 	beq.w	8004f9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d061      	beq.n	8004f60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d146      	bne.n	8004f32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b33      	ldr	r3, [pc, #204]	; (8004f74 <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe f9a3 	bl	80031f4 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb2:	f7fe f99f 	bl	80031f4 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e06d      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec4:	4b29      	ldr	r3, [pc, #164]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed8:	d108      	bne.n	8004eec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004eda:	4b24      	ldr	r3, [pc, #144]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	4921      	ldr	r1, [pc, #132]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a19      	ldr	r1, [r3, #32]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	430b      	orrs	r3, r1
 8004efe:	491b      	ldr	r1, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0a:	f7fe f973 	bl	80031f4 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f12:	f7fe f96f 	bl	80031f4 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e03d      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x46a>
 8004f30:	e035      	b.n	8004f9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <HAL_RCC_OscConfig+0x4cc>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fe f95c 	bl	80031f4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fe f958 	bl	80031f4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e026      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f52:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1f0      	bne.n	8004f40 <HAL_RCC_OscConfig+0x498>
 8004f5e:	e01e      	b.n	8004f9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e019      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40007000 	.word	0x40007000
 8004f74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_OscConfig+0x500>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d106      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000

08004fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0d0      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc0:	4b6a      	ldr	r3, [pc, #424]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d910      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	4b67      	ldr	r3, [pc, #412]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f023 0207 	bic.w	r2, r3, #7
 8004fd6:	4965      	ldr	r1, [pc, #404]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0b8      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005008:	4b59      	ldr	r3, [pc, #356]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800500e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005020:	4b53      	ldr	r3, [pc, #332]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800502a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800503a:	4313      	orrs	r3, r2
 800503c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d040      	beq.n	80050cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d115      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506a:	4b41      	ldr	r3, [pc, #260]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d109      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e073      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800507a:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e06b      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4936      	ldr	r1, [pc, #216]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800509c:	f7fe f8aa 	bl	80031f4 <HAL_GetTick>
 80050a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fe f8a6 	bl	80031f4 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e053      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	4b2d      	ldr	r3, [pc, #180]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 020c 	and.w	r2, r3, #12
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d1eb      	bne.n	80050a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d210      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f023 0207 	bic.w	r2, r3, #7
 80050e2:	4922      	ldr	r1, [pc, #136]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_ClockConfig+0x1c0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e032      	b.n	8005162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	490e      	ldr	r1, [pc, #56]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005136:	4313      	orrs	r3, r2
 8005138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800513a:	f000 f821 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 800513e:	4602      	mov	r2, r0
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_ClockConfig+0x1c4>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <HAL_RCC_ClockConfig+0x1c8>)
 800514c:	5ccb      	ldrb	r3, [r1, r3]
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <HAL_RCC_ClockConfig+0x1cc>)
 8005154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1d0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe f808 	bl	8003170 <HAL_InitTick>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40022000 	.word	0x40022000
 8005170:	40021000 	.word	0x40021000
 8005174:	08007f50 	.word	0x08007f50
 8005178:	2000043c 	.word	0x2000043c
 800517c:	20000440 	.word	0x20000440

08005180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005180:	b490      	push	{r4, r7}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005186:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_RCC_GetSysClockFreq+0xac>)
 8005188:	1d3c      	adds	r4, r7, #4
 800518a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800518c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005190:	f240 2301 	movw	r3, #513	; 0x201
 8005194:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	2300      	movs	r3, #0
 80051a0:	627b      	str	r3, [r7, #36]	; 0x24
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051aa:	4b21      	ldr	r3, [pc, #132]	; (8005230 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d002      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x40>
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d003      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x46>
 80051be:	e02b      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051c0:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051c2:	623b      	str	r3, [r7, #32]
      break;
 80051c4:	e02b      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	0c9b      	lsrs	r3, r3, #18
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3328      	adds	r3, #40	; 0x28
 80051d0:	443b      	add	r3, r7
 80051d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d012      	beq.n	8005208 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051e2:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	0c5b      	lsrs	r3, r3, #17
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	3328      	adds	r3, #40	; 0x28
 80051ee:	443b      	add	r3, r7
 80051f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80051f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <HAL_RCC_GetSysClockFreq+0xb4>)
 80051fa:	fb03 f202 	mul.w	r2, r3, r2
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
 8005206:	e004      	b.n	8005212 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4a0b      	ldr	r2, [pc, #44]	; (8005238 <HAL_RCC_GetSysClockFreq+0xb8>)
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	623b      	str	r3, [r7, #32]
      break;
 8005216:	e002      	b.n	800521e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005218:	4b06      	ldr	r3, [pc, #24]	; (8005234 <HAL_RCC_GetSysClockFreq+0xb4>)
 800521a:	623b      	str	r3, [r7, #32]
      break;
 800521c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800521e:	6a3b      	ldr	r3, [r7, #32]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3728      	adds	r7, #40	; 0x28
 8005224:	46bd      	mov	sp, r7
 8005226:	bc90      	pop	{r4, r7}
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	08007950 	.word	0x08007950
 8005230:	40021000 	.word	0x40021000
 8005234:	007a1200 	.word	0x007a1200
 8005238:	003d0900 	.word	0x003d0900

0800523c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005240:	4b02      	ldr	r3, [pc, #8]	; (800524c <HAL_RCC_GetHCLKFreq+0x10>)
 8005242:	681b      	ldr	r3, [r3, #0]
}
 8005244:	4618      	mov	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr
 800524c:	2000043c 	.word	0x2000043c

08005250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005254:	f7ff fff2 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 0307 	and.w	r3, r3, #7
 8005264:	4903      	ldr	r1, [pc, #12]	; (8005274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800526c:	4618      	mov	r0, r3
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000
 8005274:	08007f60 	.word	0x08007f60

08005278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800527c:	f7ff ffde 	bl	800523c <HAL_RCC_GetHCLKFreq>
 8005280:	4602      	mov	r2, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	0adb      	lsrs	r3, r3, #11
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4903      	ldr	r1, [pc, #12]	; (800529c <HAL_RCC_GetPCLK2Freq+0x24>)
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40021000 	.word	0x40021000
 800529c:	08007f60 	.word	0x08007f60

080052a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052a8:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <RCC_Delay+0x34>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <RCC_Delay+0x38>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0a5b      	lsrs	r3, r3, #9
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052bc:	bf00      	nop
  }
  while (Delay --);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1e5a      	subs	r2, r3, #1
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f9      	bne.n	80052bc <RCC_Delay+0x1c>
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bc80      	pop	{r7}
 80052d2:	4770      	bx	lr
 80052d4:	2000043c 	.word	0x2000043c
 80052d8:	10624dd3 	.word	0x10624dd3

080052dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_SRAM_Init+0x1c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	d101      	bne.n	80052fc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e038      	b.n	800536e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7fd fe73 	bl	8002ffc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3308      	adds	r3, #8
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f001 fcaf 	bl	8006c84 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	461a      	mov	r2, r3
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	f001 fd11 	bl	8006d58 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6858      	ldr	r0, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	f001 fd3c 	bl	8006dc0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	6892      	ldr	r2, [r2, #8]
 800535c:	f041 0101 	orr.w	r1, r1, #1
 8005360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e041      	b.n	800540c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fd fcfb 	bl	8002d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f000 fb03 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e041      	b.n	80054aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f839 	bl	80054b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 fab4 	bl	80059c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e022      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e015      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e008      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e072      	b.n	800561c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_TIM_PWM_Start+0x82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	e013      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d104      	bne.n	8005556 <HAL_TIM_PWM_Start+0x92>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	e00b      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Start+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	e003      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fd6c 	bl	8006054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a28      	ldr	r2, [pc, #160]	; (8005624 <HAL_TIM_PWM_Start+0x160>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIM_PWM_Start+0xcc>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a27      	ldr	r2, [pc, #156]	; (8005628 <HAL_TIM_PWM_Start+0x164>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_TIM_PWM_Start+0xd0>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_TIM_PWM_Start+0xd2>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <HAL_TIM_PWM_Start+0x160>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x122>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a1b      	ldr	r2, [pc, #108]	; (8005628 <HAL_TIM_PWM_Start+0x164>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x122>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c6:	d00e      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x122>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a17      	ldr	r2, [pc, #92]	; (800562c <HAL_TIM_PWM_Start+0x168>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x122>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a16      	ldr	r2, [pc, #88]	; (8005630 <HAL_TIM_PWM_Start+0x16c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_TIM_PWM_Start+0x122>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a14      	ldr	r2, [pc, #80]	; (8005634 <HAL_TIM_PWM_Start+0x170>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d111      	bne.n	800560a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b06      	cmp	r3, #6
 80055f6:	d010      	beq.n	800561a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005608:	e007      	b.n	800561a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	40012c00 	.word	0x40012c00
 8005628:	40013400 	.word	0x40013400
 800562c:	40000400 	.word	0x40000400
 8005630:	40000800 	.word	0x40000800
 8005634:	40000c00 	.word	0x40000c00

08005638 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800564e:	2302      	movs	r3, #2
 8005650:	e0ac      	b.n	80057ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0c      	cmp	r3, #12
 800565e:	f200 809f 	bhi.w	80057a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800569d 	.word	0x0800569d
 800566c:	080057a1 	.word	0x080057a1
 8005670:	080057a1 	.word	0x080057a1
 8005674:	080057a1 	.word	0x080057a1
 8005678:	080056dd 	.word	0x080056dd
 800567c:	080057a1 	.word	0x080057a1
 8005680:	080057a1 	.word	0x080057a1
 8005684:	080057a1 	.word	0x080057a1
 8005688:	0800571f 	.word	0x0800571f
 800568c:	080057a1 	.word	0x080057a1
 8005690:	080057a1 	.word	0x080057a1
 8005694:	080057a1 	.word	0x080057a1
 8005698:	0800575f 	.word	0x0800575f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fa06 	bl	8005ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0208 	orr.w	r2, r2, #8
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0204 	bic.w	r2, r2, #4
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691a      	ldr	r2, [r3, #16]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	619a      	str	r2, [r3, #24]
      break;
 80056da:	e062      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fa56 	bl	8005b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6999      	ldr	r1, [r3, #24]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	021a      	lsls	r2, r3, #8
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	619a      	str	r2, [r3, #24]
      break;
 800571c:	e041      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 faa9 	bl	8005c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0208 	orr.w	r2, r2, #8
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0204 	bic.w	r2, r2, #4
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	61da      	str	r2, [r3, #28]
      break;
 800575c:	e021      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68b9      	ldr	r1, [r7, #8]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fafd 	bl	8005d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69d9      	ldr	r1, [r3, #28]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	021a      	lsls	r2, r3, #8
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	430a      	orrs	r2, r1
 800579c:	61da      	str	r2, [r3, #28]
      break;
 800579e:	e000      	b.n	80057a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80057a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_TIM_ConfigClockSource+0x18>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e0b3      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x180>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005804:	d03e      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0xd0>
 8005806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580a:	f200 8087 	bhi.w	800591c <HAL_TIM_ConfigClockSource+0x168>
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005812:	f000 8085 	beq.w	8005920 <HAL_TIM_ConfigClockSource+0x16c>
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800581a:	d87f      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 800581c:	2b70      	cmp	r3, #112	; 0x70
 800581e:	d01a      	beq.n	8005856 <HAL_TIM_ConfigClockSource+0xa2>
 8005820:	2b70      	cmp	r3, #112	; 0x70
 8005822:	d87b      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 8005824:	2b60      	cmp	r3, #96	; 0x60
 8005826:	d050      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0x116>
 8005828:	2b60      	cmp	r3, #96	; 0x60
 800582a:	d877      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 800582c:	2b50      	cmp	r3, #80	; 0x50
 800582e:	d03c      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0xf6>
 8005830:	2b50      	cmp	r3, #80	; 0x50
 8005832:	d873      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d058      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x136>
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d86f      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 800583c:	2b30      	cmp	r3, #48	; 0x30
 800583e:	d064      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x156>
 8005840:	2b30      	cmp	r3, #48	; 0x30
 8005842:	d86b      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 8005844:	2b20      	cmp	r3, #32
 8005846:	d060      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x156>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d867      	bhi.n	800591c <HAL_TIM_ConfigClockSource+0x168>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d05c      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x156>
 8005850:	2b10      	cmp	r3, #16
 8005852:	d05a      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005854:	e062      	b.n	800591c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	6899      	ldr	r1, [r3, #8]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f000 fbd6 	bl	8006016 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005878:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]
      break;
 8005882:	e04e      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6899      	ldr	r1, [r3, #8]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f000 fbbf 	bl	8006016 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a6:	609a      	str	r2, [r3, #8]
      break;
 80058a8:	e03b      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6859      	ldr	r1, [r3, #4]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	461a      	mov	r2, r3
 80058b8:	f000 fb36 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2150      	movs	r1, #80	; 0x50
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fb8d 	bl	8005fe2 <TIM_ITRx_SetConfig>
      break;
 80058c8:	e02b      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6859      	ldr	r1, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f000 fb54 	bl	8005f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2160      	movs	r1, #96	; 0x60
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fb7d 	bl	8005fe2 <TIM_ITRx_SetConfig>
      break;
 80058e8:	e01b      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6859      	ldr	r1, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f000 fb16 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fb6d 	bl	8005fe2 <TIM_ITRx_SetConfig>
      break;
 8005908:	e00b      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f000 fb64 	bl	8005fe2 <TIM_ITRx_SetConfig>
        break;
 800591a:	e002      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800591c:	bf00      	nop
 800591e:	e000      	b.n	8005922 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005920:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e031      	b.n	80059b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fa50 	bl	8005e0c <TIM_SlaveTimer_SetConfig>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e018      	b.n	80059b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68da      	ldr	r2, [r3, #12]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a33      	ldr	r2, [pc, #204]	; (8005aa0 <TIM_Base_SetConfig+0xe0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a32      	ldr	r2, [pc, #200]	; (8005aa4 <TIM_Base_SetConfig+0xe4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00f      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e6:	d00b      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a2f      	ldr	r2, [pc, #188]	; (8005aa8 <TIM_Base_SetConfig+0xe8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d007      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a2e      	ldr	r2, [pc, #184]	; (8005aac <TIM_Base_SetConfig+0xec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a2d      	ldr	r2, [pc, #180]	; (8005ab0 <TIM_Base_SetConfig+0xf0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <TIM_Base_SetConfig+0xe0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d013      	beq.n	8005a42 <TIM_Base_SetConfig+0x82>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <TIM_Base_SetConfig+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00f      	beq.n	8005a42 <TIM_Base_SetConfig+0x82>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d00b      	beq.n	8005a42 <TIM_Base_SetConfig+0x82>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	; (8005aa8 <TIM_Base_SetConfig+0xe8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_Base_SetConfig+0x82>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	; (8005aac <TIM_Base_SetConfig+0xec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_Base_SetConfig+0x82>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <TIM_Base_SetConfig+0xf0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d108      	bne.n	8005a54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <TIM_Base_SetConfig+0xe0>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0xc8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <TIM_Base_SetConfig+0xe4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d103      	bne.n	8005a90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	615a      	str	r2, [r3, #20]
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00

08005ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0201 	bic.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0303 	bic.w	r3, r3, #3
 8005aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f023 0302 	bic.w	r3, r3, #2
 8005afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a20      	ldr	r2, [pc, #128]	; (8005b8c <TIM_OC1_SetConfig+0xd8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC1_SetConfig+0x64>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <TIM_OC1_SetConfig+0xdc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10c      	bne.n	8005b32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0308 	bic.w	r3, r3, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <TIM_OC1_SetConfig+0xd8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC1_SetConfig+0x8e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <TIM_OC1_SetConfig+0xdc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d111      	bne.n	8005b66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400

08005b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f023 0210 	bic.w	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f023 0320 	bic.w	r3, r3, #32
 8005bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_OC2_SetConfig+0xe0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d003      	beq.n	8005bfc <TIM_OC2_SetConfig+0x68>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a20      	ldr	r2, [pc, #128]	; (8005c78 <TIM_OC2_SetConfig+0xe4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10d      	bne.n	8005c18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	011b      	lsls	r3, r3, #4
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a16      	ldr	r2, [pc, #88]	; (8005c74 <TIM_OC2_SetConfig+0xe0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC2_SetConfig+0x94>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a15      	ldr	r2, [pc, #84]	; (8005c78 <TIM_OC2_SetConfig+0xe4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d113      	bne.n	8005c50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40013400 	.word	0x40013400

08005c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a21      	ldr	r2, [pc, #132]	; (8005d5c <TIM_OC3_SetConfig+0xe0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC3_SetConfig+0x66>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a20      	ldr	r2, [pc, #128]	; (8005d60 <TIM_OC3_SetConfig+0xe4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d10d      	bne.n	8005cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <TIM_OC3_SetConfig+0xe0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d003      	beq.n	8005d0e <TIM_OC3_SetConfig+0x92>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a15      	ldr	r2, [pc, #84]	; (8005d60 <TIM_OC3_SetConfig+0xe4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d113      	bne.n	8005d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	621a      	str	r2, [r3, #32]
}
 8005d50:	bf00      	nop
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40013400 	.word	0x40013400

08005d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	69db      	ldr	r3, [r3, #28]
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	; (8005e04 <TIM_OC4_SetConfig+0xa0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_OC4_SetConfig+0x68>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a10      	ldr	r2, [pc, #64]	; (8005e08 <TIM_OC4_SetConfig+0xa4>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d109      	bne.n	8005de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	019b      	lsls	r3, r3, #6
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bc80      	pop	{r7}
 8005e02:	4770      	bx	lr
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40013400 	.word	0x40013400

08005e0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f023 0307 	bic.w	r3, r3, #7
 8005e36:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2b70      	cmp	r3, #112	; 0x70
 8005e50:	d01a      	beq.n	8005e88 <TIM_SlaveTimer_SetConfig+0x7c>
 8005e52:	2b70      	cmp	r3, #112	; 0x70
 8005e54:	d860      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e56:	2b60      	cmp	r3, #96	; 0x60
 8005e58:	d054      	beq.n	8005f04 <TIM_SlaveTimer_SetConfig+0xf8>
 8005e5a:	2b60      	cmp	r3, #96	; 0x60
 8005e5c:	d85c      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e5e:	2b50      	cmp	r3, #80	; 0x50
 8005e60:	d046      	beq.n	8005ef0 <TIM_SlaveTimer_SetConfig+0xe4>
 8005e62:	2b50      	cmp	r3, #80	; 0x50
 8005e64:	d858      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d019      	beq.n	8005e9e <TIM_SlaveTimer_SetConfig+0x92>
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d854      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e6e:	2b30      	cmp	r3, #48	; 0x30
 8005e70:	d054      	beq.n	8005f1c <TIM_SlaveTimer_SetConfig+0x110>
 8005e72:	2b30      	cmp	r3, #48	; 0x30
 8005e74:	d850      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d050      	beq.n	8005f1c <TIM_SlaveTimer_SetConfig+0x110>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d84c      	bhi.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04c      	beq.n	8005f1c <TIM_SlaveTimer_SetConfig+0x110>
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d04a      	beq.n	8005f1c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005e86:	e047      	b.n	8005f18 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	68d9      	ldr	r1, [r3, #12]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f000 f8bd 	bl	8006016 <TIM_ETR_SetConfig>
      break;
 8005e9c:	e03f      	b.n	8005f1e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d101      	bne.n	8005eaa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03a      	b.n	8005f20 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6a1a      	ldr	r2, [r3, #32]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ed0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	011b      	lsls	r3, r3, #4
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
      break;
 8005eee:	e016      	b.n	8005f1e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6818      	ldr	r0, [r3, #0]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6899      	ldr	r1, [r3, #8]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f000 f813 	bl	8005f28 <TIM_TI1_ConfigInputStage>
      break;
 8005f02:	e00c      	b.n	8005f1e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	461a      	mov	r2, r3
 8005f12:	f000 f837 	bl	8005f84 <TIM_TI2_ConfigInputStage>
      break;
 8005f16:	e002      	b.n	8005f1e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005f18:	bf00      	nop
 8005f1a:	e000      	b.n	8005f1e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8005f1c:	bf00      	nop
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	f023 0201 	bic.w	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 030a 	bic.w	r3, r3, #10
 8005f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bc80      	pop	{r7}
 8005f82:	4770      	bx	lr

08005f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f023 0210 	bic.w	r2, r3, #16
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	031b      	lsls	r3, r3, #12
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f043 0307 	orr.w	r3, r3, #7
 8006004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	609a      	str	r2, [r3, #8]
}
 800600c:	bf00      	nop
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr

08006016 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006016:	b480      	push	{r7}
 8006018:	b087      	sub	sp, #28
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
 8006022:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	021a      	lsls	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	431a      	orrs	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	4313      	orrs	r3, r2
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2201      	movs	r2, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1a      	ldr	r2, [r3, #32]
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6a1a      	ldr	r2, [r3, #32]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 031f 	and.w	r3, r3, #31
 8006086:	6879      	ldr	r1, [r7, #4]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e050      	b.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a19      	ldr	r2, [pc, #100]	; (8006164 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800610a:	d00e      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a14      	ldr	r2, [pc, #80]	; (800616c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a12      	ldr	r2, [pc, #72]	; (8006170 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10c      	bne.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006130:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4313      	orrs	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	bc80      	pop	{r7}
 800615e:	4770      	bx	lr
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40013400 	.word	0x40013400
 8006168:	40000400 	.word	0x40000400
 800616c:	40000800 	.word	0x40000800
 8006170:	40000c00 	.word	0x40000c00

08006174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800618c:	2302      	movs	r3, #2
 800618e:	e03d      	b.n	800620c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4313      	orrs	r3, r2
 80061c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e03f      	b.n	80062a8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fc fe47 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2224      	movs	r2, #36	; 0x24
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68da      	ldr	r2, [r3, #12]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006258:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fc84 	bl	8006b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	; 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b20      	cmp	r3, #32
 80062ce:	d17c      	bne.n	80063ca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <HAL_UART_Transmit+0x2c>
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e075      	b.n	80063cc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Transmit+0x3e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e06e      	b.n	80063cc <HAL_UART_Transmit+0x11c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2221      	movs	r2, #33	; 0x21
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006304:	f7fc ff76 	bl	80031f4 <HAL_GetTick>
 8006308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	88fa      	ldrh	r2, [r7, #6]
 800630e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631e:	d108      	bne.n	8006332 <HAL_UART_Transmit+0x82>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d104      	bne.n	8006332 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	61bb      	str	r3, [r7, #24]
 8006330:	e003      	b.n	800633a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006342:	e02a      	b.n	800639a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2200      	movs	r2, #0
 800634c:	2180      	movs	r1, #128	; 0x80
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 fa37 	bl	80067c2 <UART_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e036      	b.n	80063cc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	461a      	mov	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006372:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	3302      	adds	r3, #2
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e007      	b.n	800638c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	3301      	adds	r3, #1
 800638a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1cf      	bne.n	8006344 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2140      	movs	r1, #64	; 0x40
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa07 	bl	80067c2 <UART_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e006      	b.n	80063cc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063c6:	2300      	movs	r3, #0
 80063c8:	e000      	b.n	80063cc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063ca:	2302      	movs	r3, #2
  }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d11d      	bne.n	800642a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <HAL_UART_Receive_IT+0x26>
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e016      	b.n	800642c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_UART_Receive_IT+0x38>
 8006408:	2302      	movs	r3, #2
 800640a:	e00f      	b.n	800642c <HAL_UART_Receive_IT+0x58>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	461a      	mov	r2, r3
 800641e:	68b9      	ldr	r1, [r7, #8]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fa18 	bl	8006856 <UART_Start_Receive_IT>
 8006426:	4603      	mov	r3, r0
 8006428:	e000      	b.n	800642c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800642a:	2302      	movs	r3, #2
  }
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08a      	sub	sp, #40	; 0x28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10d      	bne.n	8006486 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_UART_IRQHandler+0x52>
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fac9 	bl	8006a16 <UART_Receive_IT>
      return;
 8006484:	e17b      	b.n	800677e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80b1 	beq.w	80065f0 <HAL_UART_IRQHandler+0x1bc>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <HAL_UART_IRQHandler+0x70>
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 80a6 	beq.w	80065f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_UART_IRQHandler+0x90>
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	f043 0201 	orr.w	r2, r3, #1
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_UART_IRQHandler+0xb0>
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f043 0202 	orr.w	r2, r3, #2
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_UART_IRQHandler+0xd0>
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	f043 0204 	orr.w	r2, r3, #4
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00f      	beq.n	800652e <HAL_UART_IRQHandler+0xfa>
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	f003 0320 	and.w	r3, r3, #32
 8006514:	2b00      	cmp	r3, #0
 8006516:	d104      	bne.n	8006522 <HAL_UART_IRQHandler+0xee>
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 811e 	beq.w	8006774 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d007      	beq.n	8006552 <HAL_UART_IRQHandler+0x11e>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa62 	bl	8006a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d102      	bne.n	800657a <HAL_UART_IRQHandler+0x146>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d031      	beq.n	80065de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9a4 	bl	80068c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b00      	cmp	r3, #0
 800658c:	d023      	beq.n	80065d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800659c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	4a76      	ldr	r2, [pc, #472]	; (8006784 <HAL_UART_IRQHandler+0x350>)
 80065ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fc ff94 	bl	80034e0 <HAL_DMA_Abort_IT>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d016      	beq.n	80065ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	e00e      	b.n	80065ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f8e3 	bl	800679a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d4:	e00a      	b.n	80065ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8df 	bl	800679a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065dc:	e006      	b.n	80065ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f8db 	bl	800679a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065ea:	e0c3      	b.n	8006774 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	bf00      	nop
    return;
 80065ee:	e0c1      	b.n	8006774 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f040 80a1 	bne.w	800673c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 809b 	beq.w	800673c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8095 	beq.w	800673c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	60fb      	str	r3, [r7, #12]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b00      	cmp	r3, #0
 8006634:	d04e      	beq.n	80066d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006640:	8a3b      	ldrh	r3, [r7, #16]
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 8098 	beq.w	8006778 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800664c:	8a3a      	ldrh	r2, [r7, #16]
 800664e:	429a      	cmp	r2, r3
 8006650:	f080 8092 	bcs.w	8006778 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	8a3a      	ldrh	r2, [r7, #16]
 8006658:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b20      	cmp	r3, #32
 8006662:	d02b      	beq.n	80066bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006672:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006692:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0210 	bic.w	r2, r2, #16
 80066b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fc fed7 	bl	800346a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f86d 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066d2:	e051      	b.n	8006778 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066dc:	b29b      	uxth	r3, r3
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d047      	beq.n	800677c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80066ec:	8a7b      	ldrh	r3, [r7, #18]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d044      	beq.n	800677c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68da      	ldr	r2, [r3, #12]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006700:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695a      	ldr	r2, [r3, #20]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0201 	bic.w	r2, r2, #1
 8006710:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0210 	bic.w	r2, r2, #16
 800672e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006730:	8a7b      	ldrh	r3, [r7, #18]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f839 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800673a:	e01f      	b.n	800677c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d008      	beq.n	8006758 <HAL_UART_IRQHandler+0x324>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8f9 	bl	8006948 <UART_Transmit_IT>
    return;
 8006756:	e012      	b.n	800677e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00d      	beq.n	800677e <HAL_UART_IRQHandler+0x34a>
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f93a 	bl	80069e6 <UART_EndTransmit_IT>
    return;
 8006772:	e004      	b.n	800677e <HAL_UART_IRQHandler+0x34a>
    return;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <HAL_UART_IRQHandler+0x34a>
      return;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_UART_IRQHandler+0x34a>
      return;
 800677c:	bf00      	nop
  }
}
 800677e:	3728      	adds	r7, #40	; 0x28
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	08006921 	.word	0x08006921

08006788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr

0800679a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	603b      	str	r3, [r7, #0]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d2:	e02c      	b.n	800682e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067da:	d028      	beq.n	800682e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80067e2:	f7fc fd07 	bl	80031f4 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d21d      	bcs.n	800682e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006800:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 0201 	bic.w	r2, r2, #1
 8006810:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2220      	movs	r2, #32
 8006816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e00f      	b.n	800684e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4013      	ands	r3, r2
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	461a      	mov	r2, r3
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	429a      	cmp	r2, r3
 800684a:	d0c3      	beq.n	80067d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	60f8      	str	r0, [r7, #12]
 800685e:	60b9      	str	r1, [r7, #8]
 8006860:	4613      	mov	r3, r2
 8006862:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	88fa      	ldrh	r2, [r7, #6]
 800686e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88fa      	ldrh	r2, [r7, #6]
 8006874:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2222      	movs	r2, #34	; 0x22
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800689a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	695a      	ldr	r2, [r3, #20]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68da      	ldr	r2, [r3, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f042 0220 	orr.w	r2, r2, #32
 80068ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d107      	bne.n	8006908 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0210 	bic.w	r2, r2, #16
 8006906:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff2d 	bl	800679a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b21      	cmp	r3, #33	; 0x21
 800695a:	d13e      	bne.n	80069da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006964:	d114      	bne.n	8006990 <UART_Transmit_IT+0x48>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d110      	bne.n	8006990 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006982:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	1c9a      	adds	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	621a      	str	r2, [r3, #32]
 800698e:	e008      	b.n	80069a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	1c59      	adds	r1, r3, #1
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6211      	str	r1, [r2, #32]
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	3b01      	subs	r3, #1
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4619      	mov	r1, r3
 80069b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10f      	bne.n	80069d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e000      	b.n	80069dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069da:	2302      	movs	r3, #2
  }
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bc80      	pop	{r7}
 80069e4:	4770      	bx	lr

080069e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff febe 	bl	8006788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b22      	cmp	r3, #34	; 0x22
 8006a28:	f040 8099 	bne.w	8006b5e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d117      	bne.n	8006a66 <UART_Receive_IT+0x50>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d113      	bne.n	8006a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5e:	1c9a      	adds	r2, r3, #2
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	629a      	str	r2, [r3, #40]	; 0x28
 8006a64:	e026      	b.n	8006ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a78:	d007      	beq.n	8006a8a <UART_Receive_IT+0x74>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <UART_Receive_IT+0x82>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	e008      	b.n	8006aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aae:	1c5a      	adds	r2, r3, #1
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d148      	bne.n	8006b5a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0220 	bic.w	r2, r2, #32
 8006ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d123      	bne.n	8006b50 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f022 0210 	bic.w	r2, r2, #16
 8006b1c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d10a      	bne.n	8006b42 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff fe2f 	bl	80067ac <HAL_UARTEx_RxEventCallback>
 8006b4e:	e002      	b.n	8006b56 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fa fd55 	bl	8001600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	e002      	b.n	8006b60 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e000      	b.n	8006b60 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
  }
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006ba2:	f023 030c 	bic.w	r3, r3, #12
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	430b      	orrs	r3, r1
 8006bae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699a      	ldr	r2, [r3, #24]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <UART_SetConfig+0x114>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d103      	bne.n	8006bd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006bd0:	f7fe fb52 	bl	8005278 <HAL_RCC_GetPCLK2Freq>
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	e002      	b.n	8006bde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006bd8:	f7fe fb3a 	bl	8005250 <HAL_RCC_GetPCLK1Freq>
 8006bdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009a      	lsls	r2, r3, #2
 8006be8:	441a      	add	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf4:	4a22      	ldr	r2, [pc, #136]	; (8006c80 <UART_SetConfig+0x118>)
 8006bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	0119      	lsls	r1, r3, #4
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	009a      	lsls	r2, r3, #2
 8006c08:	441a      	add	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <UART_SetConfig+0x118>)
 8006c16:	fba3 0302 	umull	r0, r3, r3, r2
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	2064      	movs	r0, #100	; 0x64
 8006c1e:	fb00 f303 	mul.w	r3, r0, r3
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	3332      	adds	r3, #50	; 0x32
 8006c28:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <UART_SetConfig+0x118>)
 8006c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c34:	4419      	add	r1, r3
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009a      	lsls	r2, r3, #2
 8006c40:	441a      	add	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <UART_SetConfig+0x118>)
 8006c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8006c52:	095b      	lsrs	r3, r3, #5
 8006c54:	2064      	movs	r0, #100	; 0x64
 8006c56:	fb00 f303 	mul.w	r3, r0, r3
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	3332      	adds	r3, #50	; 0x32
 8006c60:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <UART_SetConfig+0x118>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f003 020f 	and.w	r2, r3, #15
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	440a      	add	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006c74:	bf00      	nop
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40013800 	.word	0x40013800
 8006c80:	51eb851f 	.word	0x51eb851f

08006c84 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	f023 0101 	bic.w	r1, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d102      	bne.n	8006cb4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e001      	b.n	8006cb8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006cc4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006cca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006cd0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006cd6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006cdc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8006ce2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006ce8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006cee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8006cf4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <FSMC_NORSRAM_Init+0xd0>)
 8006d14:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d1c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006d24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	43db      	mvns	r3, r3
 8006d34:	ea02 0103 	and.w	r1, r2, r3
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4319      	orrs	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	0008fb7f 	.word	0x0008fb7f

08006d58 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1c5a      	adds	r2, r3, #1
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	011b      	lsls	r3, r3, #4
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	051b      	lsls	r3, r3, #20
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	3b02      	subs	r3, #2
 8006d9e:	061b      	lsls	r3, r3, #24
 8006da0:	431a      	orrs	r2, r3
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	3201      	adds	r2, #1
 8006dac:	4319      	orrs	r1, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr

08006dc0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dd4:	d11d      	bne.n	8006e12 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dde:	4b13      	ldr	r3, [pc, #76]	; (8006e2c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	6811      	ldr	r1, [r2, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	6852      	ldr	r2, [r2, #4]
 8006dea:	0112      	lsls	r2, r2, #4
 8006dec:	4311      	orrs	r1, r2
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	6892      	ldr	r2, [r2, #8]
 8006df2:	0212      	lsls	r2, r2, #8
 8006df4:	4311      	orrs	r1, r2
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	6992      	ldr	r2, [r2, #24]
 8006dfa:	4311      	orrs	r1, r2
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	68d2      	ldr	r2, [r2, #12]
 8006e00:	0412      	lsls	r2, r2, #16
 8006e02:	430a      	orrs	r2, r1
 8006e04:	ea43 0102 	orr.w	r1, r3, r2
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006e10:	e005      	b.n	8006e1e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	cff00000 	.word	0xcff00000

08006e30 <__errno>:
 8006e30:	4b01      	ldr	r3, [pc, #4]	; (8006e38 <__errno+0x8>)
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000448 	.word	0x20000448

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	2600      	movs	r6, #0
 8006e40:	4d0c      	ldr	r5, [pc, #48]	; (8006e74 <__libc_init_array+0x38>)
 8006e42:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	f000 fca4 	bl	8007798 <_init>
 8006e50:	2600      	movs	r6, #0
 8006e52:	4d0a      	ldr	r5, [pc, #40]	; (8006e7c <__libc_init_array+0x40>)
 8006e54:	4c0a      	ldr	r4, [pc, #40]	; (8006e80 <__libc_init_array+0x44>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	08007f9c 	.word	0x08007f9c
 8006e78:	08007f9c 	.word	0x08007f9c
 8006e7c:	08007f9c 	.word	0x08007f9c
 8006e80:	08007fa0 	.word	0x08007fa0

08006e84 <memcpy>:
 8006e84:	440a      	add	r2, r1
 8006e86:	4291      	cmp	r1, r2
 8006e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006e8c:	d100      	bne.n	8006e90 <memcpy+0xc>
 8006e8e:	4770      	bx	lr
 8006e90:	b510      	push	{r4, lr}
 8006e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9c:	d1f9      	bne.n	8006e92 <memcpy+0xe>
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <memset>:
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4402      	add	r2, r0
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memset+0xa>
 8006ea8:	4770      	bx	lr
 8006eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006eae:	e7f9      	b.n	8006ea4 <memset+0x4>

08006eb0 <siprintf>:
 8006eb0:	b40e      	push	{r1, r2, r3}
 8006eb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eb6:	b500      	push	{lr}
 8006eb8:	b09c      	sub	sp, #112	; 0x70
 8006eba:	ab1d      	add	r3, sp, #116	; 0x74
 8006ebc:	9002      	str	r0, [sp, #8]
 8006ebe:	9006      	str	r0, [sp, #24]
 8006ec0:	9107      	str	r1, [sp, #28]
 8006ec2:	9104      	str	r1, [sp, #16]
 8006ec4:	4808      	ldr	r0, [pc, #32]	; (8006ee8 <siprintf+0x38>)
 8006ec6:	4909      	ldr	r1, [pc, #36]	; (8006eec <siprintf+0x3c>)
 8006ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ecc:	9105      	str	r1, [sp, #20]
 8006ece:	6800      	ldr	r0, [r0, #0]
 8006ed0:	a902      	add	r1, sp, #8
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	f000 f870 	bl	8006fb8 <_svfiprintf_r>
 8006ed8:	2200      	movs	r2, #0
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	b01c      	add	sp, #112	; 0x70
 8006ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee4:	b003      	add	sp, #12
 8006ee6:	4770      	bx	lr
 8006ee8:	20000448 	.word	0x20000448
 8006eec:	ffff0208 	.word	0xffff0208

08006ef0 <strcpy>:
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ef6:	f803 2b01 	strb.w	r2, [r3], #1
 8006efa:	2a00      	cmp	r2, #0
 8006efc:	d1f9      	bne.n	8006ef2 <strcpy+0x2>
 8006efe:	4770      	bx	lr

08006f00 <__ssputs_r>:
 8006f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f04:	688e      	ldr	r6, [r1, #8]
 8006f06:	4682      	mov	sl, r0
 8006f08:	429e      	cmp	r6, r3
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4690      	mov	r8, r2
 8006f0e:	461f      	mov	r7, r3
 8006f10:	d838      	bhi.n	8006f84 <__ssputs_r+0x84>
 8006f12:	898a      	ldrh	r2, [r1, #12]
 8006f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f18:	d032      	beq.n	8006f80 <__ssputs_r+0x80>
 8006f1a:	6825      	ldr	r5, [r4, #0]
 8006f1c:	6909      	ldr	r1, [r1, #16]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	eba5 0901 	sub.w	r9, r5, r1
 8006f24:	6965      	ldr	r5, [r4, #20]
 8006f26:	444b      	add	r3, r9
 8006f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f30:	106d      	asrs	r5, r5, #1
 8006f32:	429d      	cmp	r5, r3
 8006f34:	bf38      	it	cc
 8006f36:	461d      	movcc	r5, r3
 8006f38:	0553      	lsls	r3, r2, #21
 8006f3a:	d531      	bpl.n	8006fa0 <__ssputs_r+0xa0>
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	f000 fb61 	bl	8007604 <_malloc_r>
 8006f42:	4606      	mov	r6, r0
 8006f44:	b950      	cbnz	r0, 8006f5c <__ssputs_r+0x5c>
 8006f46:	230c      	movs	r3, #12
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4c:	f8ca 3000 	str.w	r3, [sl]
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5c:	464a      	mov	r2, r9
 8006f5e:	6921      	ldr	r1, [r4, #16]
 8006f60:	f7ff ff90 	bl	8006e84 <memcpy>
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6e:	81a3      	strh	r3, [r4, #12]
 8006f70:	6126      	str	r6, [r4, #16]
 8006f72:	444e      	add	r6, r9
 8006f74:	6026      	str	r6, [r4, #0]
 8006f76:	463e      	mov	r6, r7
 8006f78:	6165      	str	r5, [r4, #20]
 8006f7a:	eba5 0509 	sub.w	r5, r5, r9
 8006f7e:	60a5      	str	r5, [r4, #8]
 8006f80:	42be      	cmp	r6, r7
 8006f82:	d900      	bls.n	8006f86 <__ssputs_r+0x86>
 8006f84:	463e      	mov	r6, r7
 8006f86:	4632      	mov	r2, r6
 8006f88:	4641      	mov	r1, r8
 8006f8a:	6820      	ldr	r0, [r4, #0]
 8006f8c:	f000 fab8 	bl	8007500 <memmove>
 8006f90:	68a3      	ldr	r3, [r4, #8]
 8006f92:	2000      	movs	r0, #0
 8006f94:	1b9b      	subs	r3, r3, r6
 8006f96:	60a3      	str	r3, [r4, #8]
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	4433      	add	r3, r6
 8006f9c:	6023      	str	r3, [r4, #0]
 8006f9e:	e7db      	b.n	8006f58 <__ssputs_r+0x58>
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	f000 fba3 	bl	80076ec <_realloc_r>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1e1      	bne.n	8006f70 <__ssputs_r+0x70>
 8006fac:	4650      	mov	r0, sl
 8006fae:	6921      	ldr	r1, [r4, #16]
 8006fb0:	f000 fac0 	bl	8007534 <_free_r>
 8006fb4:	e7c7      	b.n	8006f46 <__ssputs_r+0x46>
	...

08006fb8 <_svfiprintf_r>:
 8006fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fbc:	4698      	mov	r8, r3
 8006fbe:	898b      	ldrh	r3, [r1, #12]
 8006fc0:	4607      	mov	r7, r0
 8006fc2:	061b      	lsls	r3, r3, #24
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	b09d      	sub	sp, #116	; 0x74
 8006fca:	d50e      	bpl.n	8006fea <_svfiprintf_r+0x32>
 8006fcc:	690b      	ldr	r3, [r1, #16]
 8006fce:	b963      	cbnz	r3, 8006fea <_svfiprintf_r+0x32>
 8006fd0:	2140      	movs	r1, #64	; 0x40
 8006fd2:	f000 fb17 	bl	8007604 <_malloc_r>
 8006fd6:	6028      	str	r0, [r5, #0]
 8006fd8:	6128      	str	r0, [r5, #16]
 8006fda:	b920      	cbnz	r0, 8006fe6 <_svfiprintf_r+0x2e>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe4:	e0d1      	b.n	800718a <_svfiprintf_r+0x1d2>
 8006fe6:	2340      	movs	r3, #64	; 0x40
 8006fe8:	616b      	str	r3, [r5, #20]
 8006fea:	2300      	movs	r3, #0
 8006fec:	9309      	str	r3, [sp, #36]	; 0x24
 8006fee:	2320      	movs	r3, #32
 8006ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ff4:	2330      	movs	r3, #48	; 0x30
 8006ff6:	f04f 0901 	mov.w	r9, #1
 8006ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ffe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071a4 <_svfiprintf_r+0x1ec>
 8007002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007006:	4623      	mov	r3, r4
 8007008:	469a      	mov	sl, r3
 800700a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800700e:	b10a      	cbz	r2, 8007014 <_svfiprintf_r+0x5c>
 8007010:	2a25      	cmp	r2, #37	; 0x25
 8007012:	d1f9      	bne.n	8007008 <_svfiprintf_r+0x50>
 8007014:	ebba 0b04 	subs.w	fp, sl, r4
 8007018:	d00b      	beq.n	8007032 <_svfiprintf_r+0x7a>
 800701a:	465b      	mov	r3, fp
 800701c:	4622      	mov	r2, r4
 800701e:	4629      	mov	r1, r5
 8007020:	4638      	mov	r0, r7
 8007022:	f7ff ff6d 	bl	8006f00 <__ssputs_r>
 8007026:	3001      	adds	r0, #1
 8007028:	f000 80aa 	beq.w	8007180 <_svfiprintf_r+0x1c8>
 800702c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800702e:	445a      	add	r2, fp
 8007030:	9209      	str	r2, [sp, #36]	; 0x24
 8007032:	f89a 3000 	ldrb.w	r3, [sl]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80a2 	beq.w	8007180 <_svfiprintf_r+0x1c8>
 800703c:	2300      	movs	r3, #0
 800703e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007046:	f10a 0a01 	add.w	sl, sl, #1
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	9307      	str	r3, [sp, #28]
 800704e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007052:	931a      	str	r3, [sp, #104]	; 0x68
 8007054:	4654      	mov	r4, sl
 8007056:	2205      	movs	r2, #5
 8007058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705c:	4851      	ldr	r0, [pc, #324]	; (80071a4 <_svfiprintf_r+0x1ec>)
 800705e:	f000 fa41 	bl	80074e4 <memchr>
 8007062:	9a04      	ldr	r2, [sp, #16]
 8007064:	b9d8      	cbnz	r0, 800709e <_svfiprintf_r+0xe6>
 8007066:	06d0      	lsls	r0, r2, #27
 8007068:	bf44      	itt	mi
 800706a:	2320      	movmi	r3, #32
 800706c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007070:	0711      	lsls	r1, r2, #28
 8007072:	bf44      	itt	mi
 8007074:	232b      	movmi	r3, #43	; 0x2b
 8007076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707a:	f89a 3000 	ldrb.w	r3, [sl]
 800707e:	2b2a      	cmp	r3, #42	; 0x2a
 8007080:	d015      	beq.n	80070ae <_svfiprintf_r+0xf6>
 8007082:	4654      	mov	r4, sl
 8007084:	2000      	movs	r0, #0
 8007086:	f04f 0c0a 	mov.w	ip, #10
 800708a:	9a07      	ldr	r2, [sp, #28]
 800708c:	4621      	mov	r1, r4
 800708e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007092:	3b30      	subs	r3, #48	; 0x30
 8007094:	2b09      	cmp	r3, #9
 8007096:	d94e      	bls.n	8007136 <_svfiprintf_r+0x17e>
 8007098:	b1b0      	cbz	r0, 80070c8 <_svfiprintf_r+0x110>
 800709a:	9207      	str	r2, [sp, #28]
 800709c:	e014      	b.n	80070c8 <_svfiprintf_r+0x110>
 800709e:	eba0 0308 	sub.w	r3, r0, r8
 80070a2:	fa09 f303 	lsl.w	r3, r9, r3
 80070a6:	4313      	orrs	r3, r2
 80070a8:	46a2      	mov	sl, r4
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	e7d2      	b.n	8007054 <_svfiprintf_r+0x9c>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	1d19      	adds	r1, r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	9103      	str	r1, [sp, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	bfbb      	ittet	lt
 80070ba:	425b      	neglt	r3, r3
 80070bc:	f042 0202 	orrlt.w	r2, r2, #2
 80070c0:	9307      	strge	r3, [sp, #28]
 80070c2:	9307      	strlt	r3, [sp, #28]
 80070c4:	bfb8      	it	lt
 80070c6:	9204      	strlt	r2, [sp, #16]
 80070c8:	7823      	ldrb	r3, [r4, #0]
 80070ca:	2b2e      	cmp	r3, #46	; 0x2e
 80070cc:	d10c      	bne.n	80070e8 <_svfiprintf_r+0x130>
 80070ce:	7863      	ldrb	r3, [r4, #1]
 80070d0:	2b2a      	cmp	r3, #42	; 0x2a
 80070d2:	d135      	bne.n	8007140 <_svfiprintf_r+0x188>
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	3402      	adds	r4, #2
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	9203      	str	r2, [sp, #12]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb8      	it	lt
 80070e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070e6:	9305      	str	r3, [sp, #20]
 80070e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80071a8 <_svfiprintf_r+0x1f0>
 80070ec:	2203      	movs	r2, #3
 80070ee:	4650      	mov	r0, sl
 80070f0:	7821      	ldrb	r1, [r4, #0]
 80070f2:	f000 f9f7 	bl	80074e4 <memchr>
 80070f6:	b140      	cbz	r0, 800710a <_svfiprintf_r+0x152>
 80070f8:	2340      	movs	r3, #64	; 0x40
 80070fa:	eba0 000a 	sub.w	r0, r0, sl
 80070fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	3401      	adds	r4, #1
 8007106:	4303      	orrs	r3, r0
 8007108:	9304      	str	r3, [sp, #16]
 800710a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800710e:	2206      	movs	r2, #6
 8007110:	4826      	ldr	r0, [pc, #152]	; (80071ac <_svfiprintf_r+0x1f4>)
 8007112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007116:	f000 f9e5 	bl	80074e4 <memchr>
 800711a:	2800      	cmp	r0, #0
 800711c:	d038      	beq.n	8007190 <_svfiprintf_r+0x1d8>
 800711e:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <_svfiprintf_r+0x1f8>)
 8007120:	bb1b      	cbnz	r3, 800716a <_svfiprintf_r+0x1b2>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	3307      	adds	r3, #7
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	3308      	adds	r3, #8
 800712c:	9303      	str	r3, [sp, #12]
 800712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007130:	4433      	add	r3, r6
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
 8007134:	e767      	b.n	8007006 <_svfiprintf_r+0x4e>
 8007136:	460c      	mov	r4, r1
 8007138:	2001      	movs	r0, #1
 800713a:	fb0c 3202 	mla	r2, ip, r2, r3
 800713e:	e7a5      	b.n	800708c <_svfiprintf_r+0xd4>
 8007140:	2300      	movs	r3, #0
 8007142:	f04f 0c0a 	mov.w	ip, #10
 8007146:	4619      	mov	r1, r3
 8007148:	3401      	adds	r4, #1
 800714a:	9305      	str	r3, [sp, #20]
 800714c:	4620      	mov	r0, r4
 800714e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007152:	3a30      	subs	r2, #48	; 0x30
 8007154:	2a09      	cmp	r2, #9
 8007156:	d903      	bls.n	8007160 <_svfiprintf_r+0x1a8>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0c5      	beq.n	80070e8 <_svfiprintf_r+0x130>
 800715c:	9105      	str	r1, [sp, #20]
 800715e:	e7c3      	b.n	80070e8 <_svfiprintf_r+0x130>
 8007160:	4604      	mov	r4, r0
 8007162:	2301      	movs	r3, #1
 8007164:	fb0c 2101 	mla	r1, ip, r1, r2
 8007168:	e7f0      	b.n	800714c <_svfiprintf_r+0x194>
 800716a:	ab03      	add	r3, sp, #12
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	462a      	mov	r2, r5
 8007170:	4638      	mov	r0, r7
 8007172:	4b10      	ldr	r3, [pc, #64]	; (80071b4 <_svfiprintf_r+0x1fc>)
 8007174:	a904      	add	r1, sp, #16
 8007176:	f3af 8000 	nop.w
 800717a:	1c42      	adds	r2, r0, #1
 800717c:	4606      	mov	r6, r0
 800717e:	d1d6      	bne.n	800712e <_svfiprintf_r+0x176>
 8007180:	89ab      	ldrh	r3, [r5, #12]
 8007182:	065b      	lsls	r3, r3, #25
 8007184:	f53f af2c 	bmi.w	8006fe0 <_svfiprintf_r+0x28>
 8007188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800718a:	b01d      	add	sp, #116	; 0x74
 800718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	ab03      	add	r3, sp, #12
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	462a      	mov	r2, r5
 8007196:	4638      	mov	r0, r7
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <_svfiprintf_r+0x1fc>)
 800719a:	a904      	add	r1, sp, #16
 800719c:	f000 f87c 	bl	8007298 <_printf_i>
 80071a0:	e7eb      	b.n	800717a <_svfiprintf_r+0x1c2>
 80071a2:	bf00      	nop
 80071a4:	08007f68 	.word	0x08007f68
 80071a8:	08007f6e 	.word	0x08007f6e
 80071ac:	08007f72 	.word	0x08007f72
 80071b0:	00000000 	.word	0x00000000
 80071b4:	08006f01 	.word	0x08006f01

080071b8 <_printf_common>:
 80071b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	4616      	mov	r6, r2
 80071be:	4699      	mov	r9, r3
 80071c0:	688a      	ldr	r2, [r1, #8]
 80071c2:	690b      	ldr	r3, [r1, #16]
 80071c4:	4607      	mov	r7, r0
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bfb8      	it	lt
 80071ca:	4613      	movlt	r3, r2
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071d2:	460c      	mov	r4, r1
 80071d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d8:	b10a      	cbz	r2, 80071de <_printf_common+0x26>
 80071da:	3301      	adds	r3, #1
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	0699      	lsls	r1, r3, #26
 80071e2:	bf42      	ittt	mi
 80071e4:	6833      	ldrmi	r3, [r6, #0]
 80071e6:	3302      	addmi	r3, #2
 80071e8:	6033      	strmi	r3, [r6, #0]
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	f015 0506 	ands.w	r5, r5, #6
 80071f0:	d106      	bne.n	8007200 <_printf_common+0x48>
 80071f2:	f104 0a19 	add.w	sl, r4, #25
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	6832      	ldr	r2, [r6, #0]
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	42ab      	cmp	r3, r5
 80071fe:	dc28      	bgt.n	8007252 <_printf_common+0x9a>
 8007200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007204:	1e13      	subs	r3, r2, #0
 8007206:	6822      	ldr	r2, [r4, #0]
 8007208:	bf18      	it	ne
 800720a:	2301      	movne	r3, #1
 800720c:	0692      	lsls	r2, r2, #26
 800720e:	d42d      	bmi.n	800726c <_printf_common+0xb4>
 8007210:	4649      	mov	r1, r9
 8007212:	4638      	mov	r0, r7
 8007214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d020      	beq.n	8007260 <_printf_common+0xa8>
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	68e5      	ldr	r5, [r4, #12]
 8007222:	f003 0306 	and.w	r3, r3, #6
 8007226:	2b04      	cmp	r3, #4
 8007228:	bf18      	it	ne
 800722a:	2500      	movne	r5, #0
 800722c:	6832      	ldr	r2, [r6, #0]
 800722e:	f04f 0600 	mov.w	r6, #0
 8007232:	68a3      	ldr	r3, [r4, #8]
 8007234:	bf08      	it	eq
 8007236:	1aad      	subeq	r5, r5, r2
 8007238:	6922      	ldr	r2, [r4, #16]
 800723a:	bf08      	it	eq
 800723c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007240:	4293      	cmp	r3, r2
 8007242:	bfc4      	itt	gt
 8007244:	1a9b      	subgt	r3, r3, r2
 8007246:	18ed      	addgt	r5, r5, r3
 8007248:	341a      	adds	r4, #26
 800724a:	42b5      	cmp	r5, r6
 800724c:	d11a      	bne.n	8007284 <_printf_common+0xcc>
 800724e:	2000      	movs	r0, #0
 8007250:	e008      	b.n	8007264 <_printf_common+0xac>
 8007252:	2301      	movs	r3, #1
 8007254:	4652      	mov	r2, sl
 8007256:	4649      	mov	r1, r9
 8007258:	4638      	mov	r0, r7
 800725a:	47c0      	blx	r8
 800725c:	3001      	adds	r0, #1
 800725e:	d103      	bne.n	8007268 <_printf_common+0xb0>
 8007260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007268:	3501      	adds	r5, #1
 800726a:	e7c4      	b.n	80071f6 <_printf_common+0x3e>
 800726c:	2030      	movs	r0, #48	; 0x30
 800726e:	18e1      	adds	r1, r4, r3
 8007270:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800727a:	4422      	add	r2, r4
 800727c:	3302      	adds	r3, #2
 800727e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007282:	e7c5      	b.n	8007210 <_printf_common+0x58>
 8007284:	2301      	movs	r3, #1
 8007286:	4622      	mov	r2, r4
 8007288:	4649      	mov	r1, r9
 800728a:	4638      	mov	r0, r7
 800728c:	47c0      	blx	r8
 800728e:	3001      	adds	r0, #1
 8007290:	d0e6      	beq.n	8007260 <_printf_common+0xa8>
 8007292:	3601      	adds	r6, #1
 8007294:	e7d9      	b.n	800724a <_printf_common+0x92>
	...

08007298 <_printf_i>:
 8007298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800729c:	7e0f      	ldrb	r7, [r1, #24]
 800729e:	4691      	mov	r9, r2
 80072a0:	2f78      	cmp	r7, #120	; 0x78
 80072a2:	4680      	mov	r8, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	469a      	mov	sl, r3
 80072a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072ae:	d807      	bhi.n	80072c0 <_printf_i+0x28>
 80072b0:	2f62      	cmp	r7, #98	; 0x62
 80072b2:	d80a      	bhi.n	80072ca <_printf_i+0x32>
 80072b4:	2f00      	cmp	r7, #0
 80072b6:	f000 80d9 	beq.w	800746c <_printf_i+0x1d4>
 80072ba:	2f58      	cmp	r7, #88	; 0x58
 80072bc:	f000 80a4 	beq.w	8007408 <_printf_i+0x170>
 80072c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072c8:	e03a      	b.n	8007340 <_printf_i+0xa8>
 80072ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ce:	2b15      	cmp	r3, #21
 80072d0:	d8f6      	bhi.n	80072c0 <_printf_i+0x28>
 80072d2:	a101      	add	r1, pc, #4	; (adr r1, 80072d8 <_printf_i+0x40>)
 80072d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072d8:	08007331 	.word	0x08007331
 80072dc:	08007345 	.word	0x08007345
 80072e0:	080072c1 	.word	0x080072c1
 80072e4:	080072c1 	.word	0x080072c1
 80072e8:	080072c1 	.word	0x080072c1
 80072ec:	080072c1 	.word	0x080072c1
 80072f0:	08007345 	.word	0x08007345
 80072f4:	080072c1 	.word	0x080072c1
 80072f8:	080072c1 	.word	0x080072c1
 80072fc:	080072c1 	.word	0x080072c1
 8007300:	080072c1 	.word	0x080072c1
 8007304:	08007453 	.word	0x08007453
 8007308:	08007375 	.word	0x08007375
 800730c:	08007435 	.word	0x08007435
 8007310:	080072c1 	.word	0x080072c1
 8007314:	080072c1 	.word	0x080072c1
 8007318:	08007475 	.word	0x08007475
 800731c:	080072c1 	.word	0x080072c1
 8007320:	08007375 	.word	0x08007375
 8007324:	080072c1 	.word	0x080072c1
 8007328:	080072c1 	.word	0x080072c1
 800732c:	0800743d 	.word	0x0800743d
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	1d1a      	adds	r2, r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	602a      	str	r2, [r5, #0]
 8007338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800733c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007340:	2301      	movs	r3, #1
 8007342:	e0a4      	b.n	800748e <_printf_i+0x1f6>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	6829      	ldr	r1, [r5, #0]
 8007348:	0606      	lsls	r6, r0, #24
 800734a:	f101 0304 	add.w	r3, r1, #4
 800734e:	d50a      	bpl.n	8007366 <_printf_i+0xce>
 8007350:	680e      	ldr	r6, [r1, #0]
 8007352:	602b      	str	r3, [r5, #0]
 8007354:	2e00      	cmp	r6, #0
 8007356:	da03      	bge.n	8007360 <_printf_i+0xc8>
 8007358:	232d      	movs	r3, #45	; 0x2d
 800735a:	4276      	negs	r6, r6
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007360:	230a      	movs	r3, #10
 8007362:	485e      	ldr	r0, [pc, #376]	; (80074dc <_printf_i+0x244>)
 8007364:	e019      	b.n	800739a <_printf_i+0x102>
 8007366:	680e      	ldr	r6, [r1, #0]
 8007368:	f010 0f40 	tst.w	r0, #64	; 0x40
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	bf18      	it	ne
 8007370:	b236      	sxthne	r6, r6
 8007372:	e7ef      	b.n	8007354 <_printf_i+0xbc>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	6820      	ldr	r0, [r4, #0]
 8007378:	1d19      	adds	r1, r3, #4
 800737a:	6029      	str	r1, [r5, #0]
 800737c:	0601      	lsls	r1, r0, #24
 800737e:	d501      	bpl.n	8007384 <_printf_i+0xec>
 8007380:	681e      	ldr	r6, [r3, #0]
 8007382:	e002      	b.n	800738a <_printf_i+0xf2>
 8007384:	0646      	lsls	r6, r0, #25
 8007386:	d5fb      	bpl.n	8007380 <_printf_i+0xe8>
 8007388:	881e      	ldrh	r6, [r3, #0]
 800738a:	2f6f      	cmp	r7, #111	; 0x6f
 800738c:	bf0c      	ite	eq
 800738e:	2308      	moveq	r3, #8
 8007390:	230a      	movne	r3, #10
 8007392:	4852      	ldr	r0, [pc, #328]	; (80074dc <_printf_i+0x244>)
 8007394:	2100      	movs	r1, #0
 8007396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800739a:	6865      	ldr	r5, [r4, #4]
 800739c:	2d00      	cmp	r5, #0
 800739e:	bfa8      	it	ge
 80073a0:	6821      	ldrge	r1, [r4, #0]
 80073a2:	60a5      	str	r5, [r4, #8]
 80073a4:	bfa4      	itt	ge
 80073a6:	f021 0104 	bicge.w	r1, r1, #4
 80073aa:	6021      	strge	r1, [r4, #0]
 80073ac:	b90e      	cbnz	r6, 80073b2 <_printf_i+0x11a>
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	d04d      	beq.n	800744e <_printf_i+0x1b6>
 80073b2:	4615      	mov	r5, r2
 80073b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80073b8:	fb03 6711 	mls	r7, r3, r1, r6
 80073bc:	5dc7      	ldrb	r7, [r0, r7]
 80073be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073c2:	4637      	mov	r7, r6
 80073c4:	42bb      	cmp	r3, r7
 80073c6:	460e      	mov	r6, r1
 80073c8:	d9f4      	bls.n	80073b4 <_printf_i+0x11c>
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d10b      	bne.n	80073e6 <_printf_i+0x14e>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	07de      	lsls	r6, r3, #31
 80073d2:	d508      	bpl.n	80073e6 <_printf_i+0x14e>
 80073d4:	6923      	ldr	r3, [r4, #16]
 80073d6:	6861      	ldr	r1, [r4, #4]
 80073d8:	4299      	cmp	r1, r3
 80073da:	bfde      	ittt	le
 80073dc:	2330      	movle	r3, #48	; 0x30
 80073de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073e2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80073e6:	1b52      	subs	r2, r2, r5
 80073e8:	6122      	str	r2, [r4, #16]
 80073ea:	464b      	mov	r3, r9
 80073ec:	4621      	mov	r1, r4
 80073ee:	4640      	mov	r0, r8
 80073f0:	f8cd a000 	str.w	sl, [sp]
 80073f4:	aa03      	add	r2, sp, #12
 80073f6:	f7ff fedf 	bl	80071b8 <_printf_common>
 80073fa:	3001      	adds	r0, #1
 80073fc:	d14c      	bne.n	8007498 <_printf_i+0x200>
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007402:	b004      	add	sp, #16
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	4834      	ldr	r0, [pc, #208]	; (80074dc <_printf_i+0x244>)
 800740a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800740e:	6829      	ldr	r1, [r5, #0]
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	f851 6b04 	ldr.w	r6, [r1], #4
 8007416:	6029      	str	r1, [r5, #0]
 8007418:	061d      	lsls	r5, r3, #24
 800741a:	d514      	bpl.n	8007446 <_printf_i+0x1ae>
 800741c:	07df      	lsls	r7, r3, #31
 800741e:	bf44      	itt	mi
 8007420:	f043 0320 	orrmi.w	r3, r3, #32
 8007424:	6023      	strmi	r3, [r4, #0]
 8007426:	b91e      	cbnz	r6, 8007430 <_printf_i+0x198>
 8007428:	6823      	ldr	r3, [r4, #0]
 800742a:	f023 0320 	bic.w	r3, r3, #32
 800742e:	6023      	str	r3, [r4, #0]
 8007430:	2310      	movs	r3, #16
 8007432:	e7af      	b.n	8007394 <_printf_i+0xfc>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	f043 0320 	orr.w	r3, r3, #32
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	2378      	movs	r3, #120	; 0x78
 800743e:	4828      	ldr	r0, [pc, #160]	; (80074e0 <_printf_i+0x248>)
 8007440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007444:	e7e3      	b.n	800740e <_printf_i+0x176>
 8007446:	0659      	lsls	r1, r3, #25
 8007448:	bf48      	it	mi
 800744a:	b2b6      	uxthmi	r6, r6
 800744c:	e7e6      	b.n	800741c <_printf_i+0x184>
 800744e:	4615      	mov	r5, r2
 8007450:	e7bb      	b.n	80073ca <_printf_i+0x132>
 8007452:	682b      	ldr	r3, [r5, #0]
 8007454:	6826      	ldr	r6, [r4, #0]
 8007456:	1d18      	adds	r0, r3, #4
 8007458:	6961      	ldr	r1, [r4, #20]
 800745a:	6028      	str	r0, [r5, #0]
 800745c:	0635      	lsls	r5, r6, #24
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	d501      	bpl.n	8007466 <_printf_i+0x1ce>
 8007462:	6019      	str	r1, [r3, #0]
 8007464:	e002      	b.n	800746c <_printf_i+0x1d4>
 8007466:	0670      	lsls	r0, r6, #25
 8007468:	d5fb      	bpl.n	8007462 <_printf_i+0x1ca>
 800746a:	8019      	strh	r1, [r3, #0]
 800746c:	2300      	movs	r3, #0
 800746e:	4615      	mov	r5, r2
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	e7ba      	b.n	80073ea <_printf_i+0x152>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	1d1a      	adds	r2, r3, #4
 800747a:	602a      	str	r2, [r5, #0]
 800747c:	681d      	ldr	r5, [r3, #0]
 800747e:	6862      	ldr	r2, [r4, #4]
 8007480:	4628      	mov	r0, r5
 8007482:	f000 f82f 	bl	80074e4 <memchr>
 8007486:	b108      	cbz	r0, 800748c <_printf_i+0x1f4>
 8007488:	1b40      	subs	r0, r0, r5
 800748a:	6060      	str	r0, [r4, #4]
 800748c:	6863      	ldr	r3, [r4, #4]
 800748e:	6123      	str	r3, [r4, #16]
 8007490:	2300      	movs	r3, #0
 8007492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007496:	e7a8      	b.n	80073ea <_printf_i+0x152>
 8007498:	462a      	mov	r2, r5
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	47d0      	blx	sl
 80074a2:	3001      	adds	r0, #1
 80074a4:	d0ab      	beq.n	80073fe <_printf_i+0x166>
 80074a6:	6823      	ldr	r3, [r4, #0]
 80074a8:	079b      	lsls	r3, r3, #30
 80074aa:	d413      	bmi.n	80074d4 <_printf_i+0x23c>
 80074ac:	68e0      	ldr	r0, [r4, #12]
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	4298      	cmp	r0, r3
 80074b2:	bfb8      	it	lt
 80074b4:	4618      	movlt	r0, r3
 80074b6:	e7a4      	b.n	8007402 <_printf_i+0x16a>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4632      	mov	r2, r6
 80074bc:	4649      	mov	r1, r9
 80074be:	4640      	mov	r0, r8
 80074c0:	47d0      	blx	sl
 80074c2:	3001      	adds	r0, #1
 80074c4:	d09b      	beq.n	80073fe <_printf_i+0x166>
 80074c6:	3501      	adds	r5, #1
 80074c8:	68e3      	ldr	r3, [r4, #12]
 80074ca:	9903      	ldr	r1, [sp, #12]
 80074cc:	1a5b      	subs	r3, r3, r1
 80074ce:	42ab      	cmp	r3, r5
 80074d0:	dcf2      	bgt.n	80074b8 <_printf_i+0x220>
 80074d2:	e7eb      	b.n	80074ac <_printf_i+0x214>
 80074d4:	2500      	movs	r5, #0
 80074d6:	f104 0619 	add.w	r6, r4, #25
 80074da:	e7f5      	b.n	80074c8 <_printf_i+0x230>
 80074dc:	08007f79 	.word	0x08007f79
 80074e0:	08007f8a 	.word	0x08007f8a

080074e4 <memchr>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	b510      	push	{r4, lr}
 80074e8:	b2c9      	uxtb	r1, r1
 80074ea:	4402      	add	r2, r0
 80074ec:	4293      	cmp	r3, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	d101      	bne.n	80074f6 <memchr+0x12>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e003      	b.n	80074fe <memchr+0x1a>
 80074f6:	7804      	ldrb	r4, [r0, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	428c      	cmp	r4, r1
 80074fc:	d1f6      	bne.n	80074ec <memchr+0x8>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <memmove>:
 8007500:	4288      	cmp	r0, r1
 8007502:	b510      	push	{r4, lr}
 8007504:	eb01 0402 	add.w	r4, r1, r2
 8007508:	d902      	bls.n	8007510 <memmove+0x10>
 800750a:	4284      	cmp	r4, r0
 800750c:	4623      	mov	r3, r4
 800750e:	d807      	bhi.n	8007520 <memmove+0x20>
 8007510:	1e43      	subs	r3, r0, #1
 8007512:	42a1      	cmp	r1, r4
 8007514:	d008      	beq.n	8007528 <memmove+0x28>
 8007516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800751a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800751e:	e7f8      	b.n	8007512 <memmove+0x12>
 8007520:	4601      	mov	r1, r0
 8007522:	4402      	add	r2, r0
 8007524:	428a      	cmp	r2, r1
 8007526:	d100      	bne.n	800752a <memmove+0x2a>
 8007528:	bd10      	pop	{r4, pc}
 800752a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800752e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007532:	e7f7      	b.n	8007524 <memmove+0x24>

08007534 <_free_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4605      	mov	r5, r0
 8007538:	2900      	cmp	r1, #0
 800753a:	d040      	beq.n	80075be <_free_r+0x8a>
 800753c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007540:	1f0c      	subs	r4, r1, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	bfb8      	it	lt
 8007546:	18e4      	addlt	r4, r4, r3
 8007548:	f000 f910 	bl	800776c <__malloc_lock>
 800754c:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <_free_r+0x8c>)
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	b933      	cbnz	r3, 8007560 <_free_r+0x2c>
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	6014      	str	r4, [r2, #0]
 8007556:	4628      	mov	r0, r5
 8007558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755c:	f000 b90c 	b.w	8007778 <__malloc_unlock>
 8007560:	42a3      	cmp	r3, r4
 8007562:	d908      	bls.n	8007576 <_free_r+0x42>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	1821      	adds	r1, r4, r0
 8007568:	428b      	cmp	r3, r1
 800756a:	bf01      	itttt	eq
 800756c:	6819      	ldreq	r1, [r3, #0]
 800756e:	685b      	ldreq	r3, [r3, #4]
 8007570:	1809      	addeq	r1, r1, r0
 8007572:	6021      	streq	r1, [r4, #0]
 8007574:	e7ed      	b.n	8007552 <_free_r+0x1e>
 8007576:	461a      	mov	r2, r3
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	b10b      	cbz	r3, 8007580 <_free_r+0x4c>
 800757c:	42a3      	cmp	r3, r4
 800757e:	d9fa      	bls.n	8007576 <_free_r+0x42>
 8007580:	6811      	ldr	r1, [r2, #0]
 8007582:	1850      	adds	r0, r2, r1
 8007584:	42a0      	cmp	r0, r4
 8007586:	d10b      	bne.n	80075a0 <_free_r+0x6c>
 8007588:	6820      	ldr	r0, [r4, #0]
 800758a:	4401      	add	r1, r0
 800758c:	1850      	adds	r0, r2, r1
 800758e:	4283      	cmp	r3, r0
 8007590:	6011      	str	r1, [r2, #0]
 8007592:	d1e0      	bne.n	8007556 <_free_r+0x22>
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4401      	add	r1, r0
 800759a:	6011      	str	r1, [r2, #0]
 800759c:	6053      	str	r3, [r2, #4]
 800759e:	e7da      	b.n	8007556 <_free_r+0x22>
 80075a0:	d902      	bls.n	80075a8 <_free_r+0x74>
 80075a2:	230c      	movs	r3, #12
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	e7d6      	b.n	8007556 <_free_r+0x22>
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	1821      	adds	r1, r4, r0
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf01      	itttt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	1809      	addeq	r1, r1, r0
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	6063      	str	r3, [r4, #4]
 80075ba:	6054      	str	r4, [r2, #4]
 80075bc:	e7cb      	b.n	8007556 <_free_r+0x22>
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000768 	.word	0x20000768

080075c4 <sbrk_aligned>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4e0e      	ldr	r6, [pc, #56]	; (8007600 <sbrk_aligned+0x3c>)
 80075c8:	460c      	mov	r4, r1
 80075ca:	6831      	ldr	r1, [r6, #0]
 80075cc:	4605      	mov	r5, r0
 80075ce:	b911      	cbnz	r1, 80075d6 <sbrk_aligned+0x12>
 80075d0:	f000 f8bc 	bl	800774c <_sbrk_r>
 80075d4:	6030      	str	r0, [r6, #0]
 80075d6:	4621      	mov	r1, r4
 80075d8:	4628      	mov	r0, r5
 80075da:	f000 f8b7 	bl	800774c <_sbrk_r>
 80075de:	1c43      	adds	r3, r0, #1
 80075e0:	d00a      	beq.n	80075f8 <sbrk_aligned+0x34>
 80075e2:	1cc4      	adds	r4, r0, #3
 80075e4:	f024 0403 	bic.w	r4, r4, #3
 80075e8:	42a0      	cmp	r0, r4
 80075ea:	d007      	beq.n	80075fc <sbrk_aligned+0x38>
 80075ec:	1a21      	subs	r1, r4, r0
 80075ee:	4628      	mov	r0, r5
 80075f0:	f000 f8ac 	bl	800774c <_sbrk_r>
 80075f4:	3001      	adds	r0, #1
 80075f6:	d101      	bne.n	80075fc <sbrk_aligned+0x38>
 80075f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075fc:	4620      	mov	r0, r4
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	2000076c 	.word	0x2000076c

08007604 <_malloc_r>:
 8007604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007608:	1ccd      	adds	r5, r1, #3
 800760a:	f025 0503 	bic.w	r5, r5, #3
 800760e:	3508      	adds	r5, #8
 8007610:	2d0c      	cmp	r5, #12
 8007612:	bf38      	it	cc
 8007614:	250c      	movcc	r5, #12
 8007616:	2d00      	cmp	r5, #0
 8007618:	4607      	mov	r7, r0
 800761a:	db01      	blt.n	8007620 <_malloc_r+0x1c>
 800761c:	42a9      	cmp	r1, r5
 800761e:	d905      	bls.n	800762c <_malloc_r+0x28>
 8007620:	230c      	movs	r3, #12
 8007622:	2600      	movs	r6, #0
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4630      	mov	r0, r6
 8007628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800762c:	4e2e      	ldr	r6, [pc, #184]	; (80076e8 <_malloc_r+0xe4>)
 800762e:	f000 f89d 	bl	800776c <__malloc_lock>
 8007632:	6833      	ldr	r3, [r6, #0]
 8007634:	461c      	mov	r4, r3
 8007636:	bb34      	cbnz	r4, 8007686 <_malloc_r+0x82>
 8007638:	4629      	mov	r1, r5
 800763a:	4638      	mov	r0, r7
 800763c:	f7ff ffc2 	bl	80075c4 <sbrk_aligned>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	4604      	mov	r4, r0
 8007644:	d14d      	bne.n	80076e2 <_malloc_r+0xde>
 8007646:	6834      	ldr	r4, [r6, #0]
 8007648:	4626      	mov	r6, r4
 800764a:	2e00      	cmp	r6, #0
 800764c:	d140      	bne.n	80076d0 <_malloc_r+0xcc>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	4631      	mov	r1, r6
 8007652:	4638      	mov	r0, r7
 8007654:	eb04 0803 	add.w	r8, r4, r3
 8007658:	f000 f878 	bl	800774c <_sbrk_r>
 800765c:	4580      	cmp	r8, r0
 800765e:	d13a      	bne.n	80076d6 <_malloc_r+0xd2>
 8007660:	6821      	ldr	r1, [r4, #0]
 8007662:	3503      	adds	r5, #3
 8007664:	1a6d      	subs	r5, r5, r1
 8007666:	f025 0503 	bic.w	r5, r5, #3
 800766a:	3508      	adds	r5, #8
 800766c:	2d0c      	cmp	r5, #12
 800766e:	bf38      	it	cc
 8007670:	250c      	movcc	r5, #12
 8007672:	4638      	mov	r0, r7
 8007674:	4629      	mov	r1, r5
 8007676:	f7ff ffa5 	bl	80075c4 <sbrk_aligned>
 800767a:	3001      	adds	r0, #1
 800767c:	d02b      	beq.n	80076d6 <_malloc_r+0xd2>
 800767e:	6823      	ldr	r3, [r4, #0]
 8007680:	442b      	add	r3, r5
 8007682:	6023      	str	r3, [r4, #0]
 8007684:	e00e      	b.n	80076a4 <_malloc_r+0xa0>
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	1b52      	subs	r2, r2, r5
 800768a:	d41e      	bmi.n	80076ca <_malloc_r+0xc6>
 800768c:	2a0b      	cmp	r2, #11
 800768e:	d916      	bls.n	80076be <_malloc_r+0xba>
 8007690:	1961      	adds	r1, r4, r5
 8007692:	42a3      	cmp	r3, r4
 8007694:	6025      	str	r5, [r4, #0]
 8007696:	bf18      	it	ne
 8007698:	6059      	strne	r1, [r3, #4]
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	bf08      	it	eq
 800769e:	6031      	streq	r1, [r6, #0]
 80076a0:	5162      	str	r2, [r4, r5]
 80076a2:	604b      	str	r3, [r1, #4]
 80076a4:	4638      	mov	r0, r7
 80076a6:	f104 060b 	add.w	r6, r4, #11
 80076aa:	f000 f865 	bl	8007778 <__malloc_unlock>
 80076ae:	f026 0607 	bic.w	r6, r6, #7
 80076b2:	1d23      	adds	r3, r4, #4
 80076b4:	1af2      	subs	r2, r6, r3
 80076b6:	d0b6      	beq.n	8007626 <_malloc_r+0x22>
 80076b8:	1b9b      	subs	r3, r3, r6
 80076ba:	50a3      	str	r3, [r4, r2]
 80076bc:	e7b3      	b.n	8007626 <_malloc_r+0x22>
 80076be:	6862      	ldr	r2, [r4, #4]
 80076c0:	42a3      	cmp	r3, r4
 80076c2:	bf0c      	ite	eq
 80076c4:	6032      	streq	r2, [r6, #0]
 80076c6:	605a      	strne	r2, [r3, #4]
 80076c8:	e7ec      	b.n	80076a4 <_malloc_r+0xa0>
 80076ca:	4623      	mov	r3, r4
 80076cc:	6864      	ldr	r4, [r4, #4]
 80076ce:	e7b2      	b.n	8007636 <_malloc_r+0x32>
 80076d0:	4634      	mov	r4, r6
 80076d2:	6876      	ldr	r6, [r6, #4]
 80076d4:	e7b9      	b.n	800764a <_malloc_r+0x46>
 80076d6:	230c      	movs	r3, #12
 80076d8:	4638      	mov	r0, r7
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	f000 f84c 	bl	8007778 <__malloc_unlock>
 80076e0:	e7a1      	b.n	8007626 <_malloc_r+0x22>
 80076e2:	6025      	str	r5, [r4, #0]
 80076e4:	e7de      	b.n	80076a4 <_malloc_r+0xa0>
 80076e6:	bf00      	nop
 80076e8:	20000768 	.word	0x20000768

080076ec <_realloc_r>:
 80076ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076f0:	4680      	mov	r8, r0
 80076f2:	4614      	mov	r4, r2
 80076f4:	460e      	mov	r6, r1
 80076f6:	b921      	cbnz	r1, 8007702 <_realloc_r+0x16>
 80076f8:	4611      	mov	r1, r2
 80076fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076fe:	f7ff bf81 	b.w	8007604 <_malloc_r>
 8007702:	b92a      	cbnz	r2, 8007710 <_realloc_r+0x24>
 8007704:	f7ff ff16 	bl	8007534 <_free_r>
 8007708:	4625      	mov	r5, r4
 800770a:	4628      	mov	r0, r5
 800770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007710:	f000 f838 	bl	8007784 <_malloc_usable_size_r>
 8007714:	4284      	cmp	r4, r0
 8007716:	4607      	mov	r7, r0
 8007718:	d802      	bhi.n	8007720 <_realloc_r+0x34>
 800771a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800771e:	d812      	bhi.n	8007746 <_realloc_r+0x5a>
 8007720:	4621      	mov	r1, r4
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff ff6e 	bl	8007604 <_malloc_r>
 8007728:	4605      	mov	r5, r0
 800772a:	2800      	cmp	r0, #0
 800772c:	d0ed      	beq.n	800770a <_realloc_r+0x1e>
 800772e:	42bc      	cmp	r4, r7
 8007730:	4622      	mov	r2, r4
 8007732:	4631      	mov	r1, r6
 8007734:	bf28      	it	cs
 8007736:	463a      	movcs	r2, r7
 8007738:	f7ff fba4 	bl	8006e84 <memcpy>
 800773c:	4631      	mov	r1, r6
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fef8 	bl	8007534 <_free_r>
 8007744:	e7e1      	b.n	800770a <_realloc_r+0x1e>
 8007746:	4635      	mov	r5, r6
 8007748:	e7df      	b.n	800770a <_realloc_r+0x1e>
	...

0800774c <_sbrk_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	2300      	movs	r3, #0
 8007750:	4d05      	ldr	r5, [pc, #20]	; (8007768 <_sbrk_r+0x1c>)
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fb fc92 	bl	8003080 <_sbrk>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_sbrk_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_sbrk_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	20000770 	.word	0x20000770

0800776c <__malloc_lock>:
 800776c:	4801      	ldr	r0, [pc, #4]	; (8007774 <__malloc_lock+0x8>)
 800776e:	f000 b811 	b.w	8007794 <__retarget_lock_acquire_recursive>
 8007772:	bf00      	nop
 8007774:	20000774 	.word	0x20000774

08007778 <__malloc_unlock>:
 8007778:	4801      	ldr	r0, [pc, #4]	; (8007780 <__malloc_unlock+0x8>)
 800777a:	f000 b80c 	b.w	8007796 <__retarget_lock_release_recursive>
 800777e:	bf00      	nop
 8007780:	20000774 	.word	0x20000774

08007784 <_malloc_usable_size_r>:
 8007784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007788:	1f18      	subs	r0, r3, #4
 800778a:	2b00      	cmp	r3, #0
 800778c:	bfbc      	itt	lt
 800778e:	580b      	ldrlt	r3, [r1, r0]
 8007790:	18c0      	addlt	r0, r0, r3
 8007792:	4770      	bx	lr

08007794 <__retarget_lock_acquire_recursive>:
 8007794:	4770      	bx	lr

08007796 <__retarget_lock_release_recursive>:
 8007796:	4770      	bx	lr

08007798 <_init>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	bf00      	nop
 800779c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779e:	bc08      	pop	{r3}
 80077a0:	469e      	mov	lr, r3
 80077a2:	4770      	bx	lr

080077a4 <_fini>:
 80077a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a6:	bf00      	nop
 80077a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077aa:	bc08      	pop	{r3}
 80077ac:	469e      	mov	lr, r3
 80077ae:	4770      	bx	lr
